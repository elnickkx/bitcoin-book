[[satoshi_whitepaper]]
[appendix]
== Satoshi Nakamoto bitcoin dolgozata

[NOTE]
====
((("whitepaper", id="whitethirteen")))((("bitcoin whitepaper", id="BCwhitethirteen")))((("Nakamoto, Satoshi", id="nakamatothirteen")))Ez az eredeti, teljes egészében reprodukált dolgozat (whitepaper), ahogy azt Satoshi Nakamoto 2008 októberében közzétette.
====

=== Bitcoin – egy peer-to-peer elektronikus fizetési rendszer

Satoshi Nakamoto

_satoshin@gmx.com_

pass:[<a href="https://bitcoin.org/en/" class="orm:hideurl"><em>www.bitcoin.org</em></a>]

*Kivonat.* Egy tisztán peer-to-peer elektronikus pénz lehetővé tenné az online fizetéseket közvetlenül az egyik féltől a másikig, pénzügyi intézményen keresztüli átutalás nélkül. A digitális aláírások a megoldás részét képezik, de a fő előnyei elvesznek, ha megbízható harmadik félre van szükség a kettős költés megakadályozására. Javasolunk egy megoldást a kettős költés problémájára peer-to-peer hálózat segítségével. A hálózat időbélyegekkel látja el a tranzakciókat hashelés révén egy hash-alapú munkabizonyíték láncba, olyan rekordot képezve, amelyet nem lehet megváltoztatni anélkül, hogy újra megtörténne a munkabizonyíték létrehozása. A leghosszabb lánc nem csupán az események sorozatának bizonyítását szolgálja, hanem annak igazolását is, hogy az a legnagyobb CPU teljesítményű csoporttól származik. Mindaddig, amíg a CPU teljesítmény többségét olyan csomópontok birtokolják, amelyek nem szövetkeznek a hálózat megtámadásara, a leghosszabb láncot ők fogják előállítani, leelőzve a támadókat. Maga a hálózat minimális struktúrát igényel. Az üzeneteket a lehető legjobb módon sugározzák. A csomópontok elhagyhatják és csatlakozhatnak a hálózathoz tetszés szerint, a leghosszabb munkabizonyítékú láncot elfogadva annak igazolására, hogy mi történt azalatt, ami alatt nem voltak jelen a hálózaton.

==== Bevezetés
Az internetes kereskedelem szinte kizárólag pénzügyi intézményekre támaszkodik, amelyek megbízható harmadik félként szolgálnak az elektronikus fizetések feldolgozására. Noha a rendszer elég jól működik a legtöbb tranzakciónál, továbbra is szenved a bizalom alapú modell velejáró gyengeségeitől. A teljesen visszafordíthatatlan tranzakciók valójában nem valósíthatók meg, mivel a pénzügyi intézmények nem tudják elkerülni a viták közvetítését. A közvetítés költsége növeli a tranzakciós költségeket, korlátozza a minimális praktikus tranzakcióméretet és kizárja a kis összegű, alkalmi tranzakciók lehetőségét. Ezen kívül további költségekkel jár a nem visszafordítható szolgáltatásokért visszafordíthatatlanul való fizetés képességének elvesztése. A visszafordítás lehetőségével a bizalom iránti igény továbbterjed. A kereskedőknek óvatosaknak kell lenniük ügyfeleikkel, és több információt kell elkérni tőlük, mint amennyire feltétlenül szükség lenne. A csalások egy bizonyos százalékát elkerülhetetlennek tekintik. Ezeket a költségeket és a fizetési bizonytalanságokat el lehet kerülni személyes találkozással, fizikai valuta használatával, de nem létezik olyan mechanizmus, amely megbízható fél nélkül kommunikációs csatornán fizetne.

Szükség van egy elektronikus fizetési rendszerre, amely kriptográfiai bizonyítékon, nem bizalmon alapul, és amely lehetővé teszi bármely két hajlandó fél számára, hogy közvetlenül egymással tranzakciókat hozzanak létre, megbízható harmadik fél közreműködése nélkül. A számítástechnikai szempontból praktikusan visszafordíthatatlan tranzakciók védik az eladókat a csalásoktól, és rutin letéti mechanizmusok könnyen bevezethetők a vásárlók védelme érdekében. Ebben a cikkben megoldást javasolunk a kettős költés problémájára, amely peer-to-peer elosztott időbélyegző szervert használ fel a tranzakciók időrendi sorrendjének számítástechnikai igazolására. A rendszer biztonságos mindaddig, amíg a becsületes csomópontok együttesen több CPU teljesítményt irányítanak, mint bármely támadó csomópontok együttműködő csoportja.

==== Tranzakciók
Az elektronikus érmét digitális aláírások láncának tekintjük. Mindegyik tulajdonos továbbadja az érmét a másiknak azáltal, hogy digitálisan aláírja az előző tranzakció hashét és a következő tulajdonos nyilvános kulcsát, és ezeket hozzáadja az érme végéhez. A kedvezményezett ellenőrizheti az aláírásokat a tulajdonosi lánc ellenőrzése céljából.

image::images/mbc2_abin01.png["Tranzakciók"]

A probléma természetesen az, hogy a kedvezményezett nem tudja igazolni, hogy az egyik tulajdonos nem költette el kétszer az érmét. Általános megoldás egy megbízható központi hatóság vagy pénzverde bevezetése, amely minden tranzakciót ellenőriz kettős költés szempontjából. Minden egyes tranzakció után az érmét vissza kell juttatni a pénzverdébe, hogy új érmét bocsássanak ki, és kizárólag a pénzverdéből közvetlenül kibocsátott érmékben bíznak meg, hogy nem kerülnek kettős költésre. Ennek a megoldásnak az a problémája, hogy a teljes pénzrendszer sorsa a pénzverde irányítójától függ, és minden tranzakciónak, akárcsak egy banknál, át kell mennie rajta.

Szükségünk van arra, hogy a kedvezményezett meg tudjon bizonyosodni arról, hogy a korábbi tulajdonosok nem írtak alá korábbi tranzakciókat. Célunk szempontjából a legkorábbi tranzakció számít, tehát nem érdekel minket a későbbi kettős költés kísérlete. Az egyetlen módszer egy tranzakció hiányának igazolására az összes tranzakció ismerete. A pénzverde alapú modellben a pénzverde tisztában volt az összes tranzakcióval és megállapította, hogy melyik érkezett előbb. Ahhoz, hogy ezt megbízható fél nélkül megvalósítsuk, a tranzakciókat nyilvánosan be kell jelenteni [1], és szükségünk van egy rendszerre, amellyel a résztvevők megállapodhatnak abban a sorrendben, amelyben a beérkezésük megtörtént. A kedvezményezettnek bizonyítékra van szüksége, hogy az egyes tranzakciók időpontjában a csomópontok többsége egyetértett azzal, hogy az az első.

==== Időbélyegző szerver
A javasolt megoldás egy időbélyegző szerverrel kezdődik. Az időbélyegző szerver úgy működik, hogy veszi elemek egy blokkjának hashét, amelyeket időbélyegzővel szeretnénk ellátni, és széles körben közzéteszi a hasht, például újságban vagy Usenet bejegyzésben [2-5]. Az időbélyeg azt bizonyítja, hogy az adatok nyilvánvalóan léteztek abban az időben ahhoz, hogy bekerüljenek a hashbe. Minden időbélyeg tartalmazza hashében az előző időbélyegzőt, láncot képezve, minden további időbélyeggel megerősítve az előtte lévőket.

image::images/mbc2_abin02.png["időbélyegző szerver"]

=== Munkabizonyíték (Proof-of-Work)
Az elosztott időbélyegző szerver peer-to-peer alapon történő megvalósításához Adam Back Hashcash-éhez hasonló munkabizonyíték rendszert kell használniuk, újság vagy Usenet üzenetek helyett. A munkabizonyíték magában foglalja egy olyan érték megkeresését, amely például SHA-256-val hashelve, a hash több nulla bittel kezdődik. A szükséges átlagos munka a szükséges nulla bitek számának növelésével exponenciális növekszik, és egyetlen hash művelet végrehajtásával ellenőrizhető. Időbélyegző hálózatunkban a munkabizonyítékot úgy valósítjuk meg, hogy egy nonce értéket növelünk a blokkban, amíg egy olyan értéket nem találunk, amellyel a blokk hashe a szükséges nulla bitekkel rendelkezik. Miután a CPU számítási munkái megtörténtek annak érdekében, hogy kielégítsék a munkabizonyítékot, a blokkot nem lehet megváltoztatni a munka újra elvégzése nélkül. Mivel a későbbi blokkokat ezután a blokk után láncolják, a blokk megváltoztatásának feladata magában foglalja az azt követő összes blokk újbóli elkészítését.

image::images/mbc2_abin03.png["pow"]

A munkabizonyíték a többségi döntéshozatalban a képviselet meghatározásának problémáját is megoldja. Ha a többség egy IP-cím-egy szavazaton alapulna, azt bárki felboríthatná, aki képes sok IP-t kiosztani. A munkabizonyíték alapvetően egy CPU-egy szavazat. A többségi döntést a leghosszabb lánc képviseli, amely a legnagyobb munkabizonyíték befektetéssel rendelkezik. Ha a CPU teljesítmény nagy részét becsületes csomópontok irányítják, akkor a becsületes lánc növekszik leggyorsabban, és leelőzi az összes versenytárs láncot. Múltbeli blokk módosításához a támadónak újra el kellene végeznie a blokk és az azt követő összes blokk munkabizonyítékát, majd utolérnie és megelőznie az őszinte csomópontok munkáját. Később megmutatjuk, hogy a lassabb támadó felzárkózásának valószínűsége újabb blokkok hozzáadásával exponenciálisan csökken.

A növekvő hardversebesség, és a csomópontok futtatásának idővel változó érdeklődésének kompenzálása érdekében a munkabizonyíték nehézségét egy mozgó átlag határozza meg, amely az óránként létrejövő blokkok átlagos számát célozza. Ha túl gyorsan jönnek létre, akkor a nehézség növekszik.

==== Hálózat

A hálózat futtatásának lépései a következők:

1. Az új tranzakciókat minden csomópontnak elküldi.
2. Minden csomópont új tranzakciókat gyűjt egy blokkba.
3. Mindegyik csomópont arra törekszik, hogy blokkjának nehéz munkabizonyítékát megtalálja.
4. Amikor egy csomópont megtalálja a munkabizonyítékot, a blokkot minden csomópontnak továbbítja.
5. A csomópontok csak akkor fogadják el a blokkot, ha az abban szereplő összes tranzakció érvényes, és még nem költötték el.
6. A csomópontok kifejezik a blokk elfogadását azáltal, hogy a következő blokkot hozzák létre a láncban, az elfogadott blokk hashét használva, mint az előző hash.

A csomópontok mindig a leghosszabb láncot tartják helyesnek, és tovább dolgoznak annak meghosszabbításán. Ha két csomópont egyidejűleg továbbítja a következő blokk különböző verzióit, akkor előfordulhat, hogy néhány csomópont az egyiket, néhány a másikat fogadja először. Ebben az esetben az elsőt dolgozzák fel, amelyet megkaptak, de a másik ágat is elmentik arra az esetre, ha az hosszabb lesz. A verseny eldől, amikor megtalálják a következő munkabizonyítékot, és az egyik ág hosszabb lesz. Ekkor, azok a csomópontok, amelyek a másik ágon dolgoztak a hosszabbra váltanak.

Az új tranzakcióknak nem feltétlenül kell minden csomópontot elérniük. Mindaddig, amíg sok csomópontot elérnek, hamarosan blokkba kerülnek. A blokk küldések tolerálják az elutasított üzeneteket is. Ha egy csomópont nem kap meg egy blokkot, akkor lekérdezi, amikor megkapja a következő blokkot, és rájön, hogy egy hiányzott.

==== Ösztönzés
Megállapodás szerint a blokkban az első tranzakció egy speciális tranzakció, amely egy új érmét vezet be, amely a blokk létrehozójának tulajdonába kerül. Ez ösztönzi a csomópontokat a hálózat támogatására, és lehetőséget nyújt az érmék kezdeti forgalomba hozatalához, mivel nincs központi hatóság, amely ezeket forgalomba hozná. Az új érmék állandó mennyiségének folyamatos hozzáadása hasonló az aranybányászokhoz, akik erőforrásokat költenek az arany forgalomba hozatalához. Esetünkben CPU-idő és áram elköltéséről van szó.

Az ösztönzőt tranzakciós díjakkal is finanszírozhatjuk. Ha egy tranzakció kimeneti értéke alacsonyabb, mint annak bemeneti értéke, akkor a különbség egy tranzakciós díj, amelyet hozzáadnak a tranzakciót tartalmazó blokk ösztönző értékéhez. Miután egy előre meghatározott számú érme forgalomba került, az ösztönző teljes mértékben áttérhet a tranzakciós díjakra, és teljesen inflációmentes lehet.

Az ösztönzés elősegítheti azt, hogy a csomópontok becsületesek maradjanak. Ha egy kapzsi támadó több CPU teljesítményt képes összeállítani, mint amivel az összes becsületes csomópont rendelkezik, akkor választania kellene, hogy meglopja-e az embereket fizetéseinek visszaszerzésével, vagy új érmék előállítására használja-e azt. Jövedelmezőbbnek kellene lennie, ha a szabályok szerint játszik, – olyan szabályokkal, amelyekkel több új érmét szerezhet, mint mindenki mástól együttvéve –, mint hogy aláássa a rendszert és saját vagyonának érvényességét.

==== Lemezterület visszanyerése

++++
<p>Miután egy érme legutóbbi tranzakciója elegendő blokk alá van eltemetve, a lemezterület megtakarítása érdekében a korábbi elköltött tranzakciók elvethetők. Ennek megkönnyítése érdekében (a blokk hash megtörése nélkül) a tranzakciókat Merkle-fába hashelik <a href="#ref_seven">[7]</a> <a href="#ref_two">[2]</a> <a href="#ref_five">[5]</a> úgy, hogy csak a gyökér szerepel a blokk hashben. A régi blokkok ezután tömöríthetők a fa ágainak lenyesésével. A belső hasheket nem kell tárolni.</p>
++++

image::images/mbc2_abin04.png["diszk"]

A tranzakció nélküli blokk fejléce körülbelül 80 bájt. Ha feltételezzük, hogy a blokkok 10 percenként generálódnak, akkor ez +80 bájt * 6 * 24 * 365 = 4,2 MB+ évente. Ha figyelembe vesszük, hogy 2008-ban egy számítógépes rendszert tipikusan 2 GB RAM-mal árulnak, és jelenleg a Moore-törvény szerint éves 1,2 GB-os növekedés várható, a tárolásnak nem szabad gondot okoznia, még akkor sem, ha a blokk fejléceit memóriában kell tartani.

==== Egyszerűsített fizetés ellenőrzés (SPV)
A fizetések ellenőrzése teljes hálózati csomópont futtatása nélkül is lehetséges. A felhasználónak csak meg kell őriznie a leghosszabb munkabizonyítékú lánc blokkfejléceinek egy példányát, amelyet a hálózati csomópontok lekérdezésével kaphat, amíg meg nem győződött arról, hogy ő rendelkezik a leghosszabb lánccal, és meg kell szereznie a Merkle ágat, amely összeköti a tranzakciót az azt időbélyegző blokkal. Magát a tranzakciót nem tudja ellenőrizni, de a lánc egy pontjához kapcsolva láthatja, hogy egy hálózati csomópont elfogadta, és a további hozzáadott blokkok megerősítik, hogy a hálózat is elfogadta azt.

image::images/mbc2_abin05.png["spv"]

As such, the verification is reliable as long as honest nodes control the network, but is more vulnerable if the network is overpowered by an attacker. While network nodes can verify transactions for themselves, the simplified method can be fooled by an attacker's fabricated transactions for as long as the attacker can continue to overpower the network. One strategy to protect against this would be to accept alerts from network nodes when they detect an invalid block, prompting the user's software to download the full block and alerted transactions to confirm the inconsistency. Businesses that receive frequent payments will probably still want to run their own nodes for more independent security and quicker verification.

==== Combining and Splitting Value
Although it would be possible to handle coins individually, it would be unwieldy to make a separate transaction for every cent in a transfer. To allow value to be split and combined, transactions contain multiple inputs and outputs. Normally there will be either a single input from a larger previous transaction or multiple inputs combining smaller amounts, and at most two outputs: one for the payment, and one returning the change, if any, back to the sender.

image::images/mbc2_abin06.png["combining-splitting"]

It should be noted that fan-out, where a transaction depends on several transactions, and those transactions depend on many more, is not a problem here. There is never the need to extract a complete standalone copy of a transaction's history.

==== Adatvédelem
The traditional banking model achieves a level of privacy by limiting access to information to the parties involved and the trusted third party. The necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: by keeping public keys anonymous. The public can see that someone is sending an amount to someone else, but without information linking the transaction to anyone. This is similar to the level of information released by stock exchanges, where the time and size of individual trades, the "tape", is made public, but without telling who the parties were.

image::images/mbc2_abin07.png["adatvédelem"]

As an additional firewall, a new key pair should be used for each transaction to keep them from being linked to a common owner. Some linking is still unavoidable with multi-input transactions, which necessarily reveal that their inputs were owned by the same owner. The risk is that if the owner of a key is revealed, linking could reveal other transactions that belonged to the same owner.

==== Calculations
We consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain. Even if this is accomplished, it does not throw the system open to arbitrary changes, such as creating value out of thin air or taking money that never belonged to the attacker. Nodes are not going to accept an invalid transaction as payment, and honest nodes will never accept a block containing them. An attacker can only try to change one of his own transactions to take back money he recently spent.

The race between the honest chain and an attacker chain can be characterized as a Binomial Random Walk. The success event is the honest chain being extended by one block, increasing its lead by +1, and the failure event is the attacker's chain being extended by one block, reducing the gap by -1.

++++
<p>The probability of an attacker catching up from a given deficit is analogous to a Gambler's Ruin problem. Suppose a gambler with unlimited credit starts at a deficit and plays potentially an infinite number of trials to try to reach breakeven. We can calculate the probability he ever reaches breakeven, or that an attacker ever catches up with the honest chain, as follows <a href="#ref_eight">[8]</a>:</p>
++++

p = probability an honest node finds the next block

q = probability the attacker finds the next block

q~z~ = probability the attacker will ever catch up from z blocks behind

image::images/mbc2_abin08.png["eq1"]

Given our assumption that p > q, the probability drops exponentially as the number of blocks the attacker has to catch up with increases. With the odds against him, if he doesn't make a lucky lunge forward early on, his chances become vanishingly small as he falls further behind.

We now consider how long the recipient of a new transaction needs to wait before being sufficiently certain the sender can't change the transaction. We assume the sender is an attacker who wants to make the recipient believe he paid him for a while, then switch it to pay back to himself after some time has passed. The receiver will be alerted when that happens, but the sender hopes it will be too late.

The receiver generates a new key pair and gives the public key to the sender shortly before signing. This prevents the sender from preparing a chain of blocks ahead of time by working on it continuously until he is lucky enough to get far enough ahead, then executing the transaction at that moment. Once the transaction is sent, the dishonest sender starts working in secret on a parallel chain containing an alternate version of his transaction.

The recipient waits until the transaction has been added to a block and z blocks have been linked after it. He doesn't know the exact amount of progress the attacker has made, but assuming the honest blocks took the average expected time per block, the attacker's potential progress will be a Poisson distribution with expected value:

image::images/mbc2_abin09.png["eq2"]

To get the probability the attacker could still catch up now, we multiply the Poisson density for each amount of progress he could have made by the probability he could catch up from that point:

image::images/mbc2_abin10.png["eq3"]

Rearranging to avoid summing the infinite tail of the distribution...

image::images/mbc2_abin11.png["eq4"]

Converting to C code...

[source,c]
----
#include <math.h>
double AttackerSuccessProbability(double q, int z)
{
    double p = 1.0 - q;
    double lambda = z * (q / p);
    double sum = 1.0;
    int i, k;
    for (k = 0; k <= z; k++)
    {
        double poisson = exp(-lambda);
        for (i = 1; i <= k; i++)
            poisson *= lambda / i;
        sum -= poisson * (1 - pow(q / p, z - k));
    }
    return sum;
}
----

Running some results, we can see the probability drop off exponentially with z.
----
q=0.1
z=0 P=1.0000000
z=1 P=0.2045873
z=2 P=0.0509779
z=3 P=0.0131722
z=4 P=0.0034552
z=5 P=0.0009137
z=6 P=0.0002428
z=7 P=0.0000647
z=8 P=0.0000173
z=9 P=0.0000046
z=10 P=0.0000012
----
----
q=0.3
z=0 P=1.0000000
z=5 P=0.1773523
z=10 P=0.0416605
z=15 P=0.0101008
z=20 P=0.0024804
z=25 P=0.0006132
z=30 P=0.0001522
z=35 P=0.0000379
z=40 P=0.0000095
z=45 P=0.0000024
z=50 P=0.0000006
----
Solving for P less than 0.1%...
----
P < 0.001
q=0.10 z=5
q=0.15 z=8
q=0.20 z=11
q=0.25 z=15
q=0.30 z=24
q=0.35 z=41
q=0.40 z=89
q=0.45 z=340
----

==== Befejezés
We have proposed a system for electronic transactions without relying on trust. We started with the usual framework of coins made from digital signatures, which provides strong control of ownership, but is incomplete without a way to prevent double-spending. To solve this, we proposed a peer-to-peer network using proof-of-work to record a public history of transactions that quickly becomes computationally impractical for an attacker to change if honest nodes control a majority of CPU power. The network is robust in its unstructured simplicity. Nodes work all at once with little coordination. They do not need to be identified, since messages are not routed to any particular place and only need to be delivered on a best effort basis. Nodes can leave and rejoin the network at will, accepting the proof-of-work chain as proof of what happened while they were gone. They vote with their CPU power, expressing their acceptance of valid blocks by working on extending them and rejecting invalid blocks by refusing to work on them. Any needed rules and incentives can be enforced with this consensus mechanism.

==== Hivatkozások
++++
<p>
<span id="ref_one">[1]</span> W. Dai, "b-money," <a href="http://www.weidai.com/bmoney.txt"><em>http://www.weidai.com/bmoney.txt</em></a>, 1998.
</p>
<p>
<span id="ref_two">[2]</span> H. Massias, X.S. Avila, and J.-J. Quisquater, "Design of a secure timestamping service with minimal trust requirements," In 20th Symposium on Information Theory in the Benelux, May 1999.
</p>
<p>
<span id="ref_three">[3]</span> S. Haber, W.S. Stornetta, "How to time-stamp a digital document," In Journal of Cryptology, vol 3, no 2, pages 99-111, 1991.
</p>

<p>
<span id="ref_four">[4]</span> D. Bayer, S. Haber, W.S. Stornetta, "Improving the efficiency and reliability of digital time-stamping," In Sequences II: Methods in Communication, Security and Computer Science, pages 329-334, 1993.
</p>

<p>
<span id="ref_five">[5]</span> S. Haber, W.S. Stornetta, "Secure names for bit-strings," In Proceedings of the 4th ACM Conference on Computer and Communications Security, pages 28-35, April 1997.
</p>

<p>
<span id="ref_six">[6]</span> A. Back, "Hashcash - a denial of service counter-measure," <a href="http://www.hashcash.org/papers/hashcash.pdf"><em>http://www.hashcash.org/papers/hashcash.pdf</em></a>, 2002.
</p>

<p>
<span id="ref_seven">[7]</span> R.C. Merkle, "Protocols for public key cryptosystems," In Proc. 1980 Symposium on Security and Privacy, IEEE Computer Society, pages 122-133, April 1980.
</p>

<p>
<span id="ref_eight">[8]</span> W. Feller, "An introduction to probability theory and its applications," 1957.
</p>
++++

=== Licenc

((("open source licenses")))This whitepaper was published in October 2008 by Satoshi Nakamoto. It was later (2009) added as supporting documentation to the bitcoin software and carries the same MIT license. It has been reproduced in this book, without modification other than formatting, under the terms of the MIT license:

The MIT License (MIT)
Copyright (c) 2008 Satoshi Nakamoto

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS," WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.((("", startref="whitethirteen")))((("", startref="nakamatothirteen")))((("", startref="BCwhitethirteen")))