[[ch02_bitcoin_overview]]
== Come Funziona Bitcoin

=== Transazioni, Blocchi, Mining, e la Blockchain

((("bitcoin", "overview of", id = "BCover02"))) ((("autorità fiduciaria centrale"))) ((("sistemi decentralizzati", "panoramica bitcoin", id = "DCSover02") )) Il sistema bitcoin, a differenza dei sistemi bancari e di pagamento tradizionali, si basa sulla fiducia decentralizzata. Invece di un'autorità fiduciaria centrale, in bitcoin la fiducia viene raggiunta come una proprietà emergente dalle interazioni dei diversi partecipanti al sistema. In questo capitolo, esamineremo bitcoin da un livello elevato rintracciando una singola transazione attraverso il sistema bitcoin e osserveremo come diventa "attendibile" e accettata dal meccanismo del consenso distribuito e viene infine registrata sulla blockchain, il registro distribuito di Tutte le transazioni. I capitoli successivi approfondiranno la tecnologia alla base delle transazioni, della rete e del mining.

==== Panoramica su Bitcoin

Nel diagramma di sintesi mostrato in << panoramica bitcoin >>, vediamo che il sistema bitcoin è composto da utenti con portafogli contenenti chiavi, da transazioni che vengono propagate attraverso la rete e da minatori che producono (tramite calcolo competitivo) la blockchain di consenso, che è il registro affidabile di tutte le transazioni.


((("blockchain explorer sites"))) Ogni esempio in questo capitolo si basa su una transazione reale effettuata sulla rete bitcoin, simulando le interazioni tra gli utenti (Joe, Alice, Bob e Gopesh) inviando fondi da un portafoglio ad un altro. Durante il monitoraggio di una transazione attraverso la rete bitcoin nella blockchain, utilizzeremo un sito _blockchain explorer_ per visualizzare ogni passaggio. Un blockchain explorer è un'applicazione web che funziona come un motore di ricerca bitcoin, in quanto consente di cercare indirizzi, transazioni e blocchi e visualizzare le relazioni e i flussi tra di essi.

[[bitcoin-overview]]
.Panoramica su Bitcoin
image::images/mbc2_0201.png["Bitcoin Overview"]

((("Bitcoin Block Explorer"))) ((("BlockCypher Explorer"))) ((("blockchain.info"))) ((("BitPay Insight"))) I più popolari Blockchain Explorer comprendono:

* https://live.blockcypher.com[BlockCypher Explorer]
* https://blockchain.info[blockchain.info]
* https://insight.bitpay.com[BitPay Insight]
* https://blockstream.info[Blockstream Explorer]

Ognuno di questi ha una funzione di ricerca che può essere usato con un indirizzo bitcoin, con hash della transazione, con un numero di blocco o hash del blocco e recuperare le informazioni corrispondenti dalla rete bitcoin. Con ogni esempio di transazione o blocco, forniremo un URL in modo che tu possa cercarlo da solo e studiarlo in dettaglio.


[[cup_of_coffee]]
==== Pagare un Caffè

((("use cases", "buying coffee", id = "UCcoffee02"))) Alice, introdotta nel capitolo precedente, è un nuovo utente che ha appena acquisito il suo primo bitcoin. In << getting_first_bitcoin >>, Alice ha incontrato il suo amico Joe per scambiarsi qualche soldo con bitcoin. La transazione creata da Joe ha finanziato il portafoglio Alice con 0.10 BTC. Ora Alice farà la sua prima transazione al dettaglio, comprando una tazza di caffè nella caffetteria di Bob a Palo Alto, in California.

((("tassi di cambio", "determinazione"))) Bob's Cafe ha recentemente iniziato ad accettare pagamenti in bitcoin aggiungendo un'opzione bitcoin al proprio registratore di cassa. I prezzi di Bob's Cafe sono elencati nella valuta locale (dollari USA), ma alla cassa i clienti hanno la possibilità di pagare in dollari o in bitcoin. Alice fa il suo ordine per una tazza di caffè e Bob lo inserisce nel registratore di cassa, come fa per tutte le transazioni. Il POS converte automaticamente il prezzo totale da dollari USA a bitcoin al tasso di mercato prevalente e visualizza il prezzo in entrambe le valute:

----
Totale:
$1.50 USD
0.015 BTC
----


((("millibits"))) Bob dice "Questo è un dollaro, cinquanta o quindici millibitcoin".

((("richieste di pagamento"))) ((("Codici QR", "richieste di pagamento"))) Il registratore di cassa di Bob creerà automaticamente anche un codice QR speciale contenente una richiesta _pagamento_ (vedere << pagamento- richiesta-QR >>).

A differenza di un codice QR che contiene semplicemente un indirizzo bitcoin di destinazione, una richiesta di pagamento è un URL codificato in QR che contiene un indirizzo di destinazione, un importo di pagamento e una descrizione generica come "Bob's Cafe". Ciò consente a un bitcoin wallet di precompilare le informazioni utilizzate per inviare il pagamento e mostrare all'utente una descrizione a misura d'uomo. È possibile eseguire la scansione del codice QR con un'applicazione portafoglio bitcoin per vedere cosa vedrebbe Alice.


[[payment-request-QR]]
. QR code per la richiesta di pagamento
image::images/mbc2_0202.png["payment-request"]

[TIP]
====
((("Codici QR", "avvertenze e precauzioni"))) ((("transazioni", "avvisi e avvertenze"))) ((("avvisi e precauzioni", "evitare di inviare denaro agli indirizzi che compaiono nel libro" ))) Prova a scansionare questo con il tuo portafoglio per vedere l'indirizzo e l'importo ma NON INVIARE DENARO.
====
[[payment-request-URL]]
Il codice QR della richiesta di pagamento codifica il seguente URL, definito in BIP-21:
----
bitcoin:1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA?
amount=0.015&
label=Bob%27s%20Cafe&
message=Purchase%20at%20Bob%27s%20Cafe

Parti dell'URL

Un indirizzo bitcoin: "1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"
L'importo del pagamento: "0.015"
Un'etichetta per l'indirizzo del destinatario: "Bob's Cafe"
Una descrizione del pagamento: "Acquisto al Bar di Bob"
----

Alice usa il suo smartphone per scansionare il codice a barre sul display. Il suo smartphone mostra un pagamento di +0.0150 BTC + a + Bob's Cafe + e seleziona "Invia" per autorizzare il pagamento. Entro pochi secondi (all'incirca lo stesso periodo di una operazione con una carta di credito), Bob vede la transazione sul registro, completando la transazione.

Nelle sezioni seguenti, esamineremo questa transazione in modo più dettagliato. Vedremo come è stato costruito il portafoglio di Alice, come è stato propagato attraverso la rete, come è stato verificato e, infine, come Bob può spendere tale importo nelle transazioni successive.

[NOTE]
====
((("valori frazionari"))) ((("milli-bitcoin"))) ((("satoshis"))) La rete bitcoin può eseguire transazioni in valori frazionari, ad es. da millibitcoin (1/1000 di bitcoin ) fino a 1 / 100.000.000 di bitcoin, che è noto come satoshi. In questo libro useremo il termine "bitcoin" per riferirsi a qualsiasi quantità di valuta bitcoin, dall'unità più piccola (1 satoshi) al numero totale (21.000.000) di tutti i bitcoin che verranno mai estratti.
====

Puoi esaminare la transazione di Alice verso Bob's Cafe sulla blockchain utilizzando un sito block explorer (<< view_alice_transaction >>):

[[view_alice_transaction]]
Vedi la transazione di Alice su https://blockchain.info/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2[blockchain.info]
====
----
https://blockchain.info/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2
----
====

=== Transazioni Bitcoin

((("transazioni", "definito"))) In termini semplici, una transazione comunica alla rete che il proprietario di alcuni bitcoin ha autorizzato il trasferimento di tale valore ad un altro proprietario. Il nuovo proprietario può ora spendere il bitcoin creando un'altra transazione che autorizza il trasferimento a un altro proprietario e così via, in una catena di proprietà.

==== Input e output delle transazioni

((("transazioni", "panoramica di", id = "Tover02"))) ((("output e input", "elementi di base di"))) Le transazioni sono come le righe di un registro contabile a partita doppia. Ogni transazione contiene uno o più "input", che sono come debiti contro un account bitcoin. Dall'altra parte della transazione, ci sono uno o più "output", che sono come crediti aggiunti a un account bitcoin. ((("commissioni", "commissioni di transazione"))) Gli input e gli output (debiti e crediti) non si sommano necessariamente allo stesso importo. Invece, gli output si sommano a un po 'meno degli input e la differenza rappresenta una implicita _transaction fee_, che è un piccolo pagamento raccolto dal minatore che inserisce la transazione nel libro mastro. Una transazione bitcoin viene mostrata come una voce di libro mastro contabile in  <<transaction-double-entry>>.

La transazione contiene anche una prova di proprietà per ogni quantità di bitcoin (input) il cui valore viene speso, sotto forma di una firma digitale dal proprietario, che può essere validata indipendentemente da chiunque. ((("spending bitcoin", "defined"))) In termini di bitcoin, "spending" sta firmando una transazione che trasferisce il valore da una transazione precedente a un nuovo proprietario identificato da un indirizzo bitcoin.

[[transaction-double-entry]]
.Transazioni come libro di contabilità in partita doppia
image::images/mbc2_0203.png["Transaction Double-Entry"]

==== Catene di transazioni

((("catena di transazioni"))) Il pagamento di Alice a Bob's Cafe utilizza l'output di una transazione precedente come input. Nel capitolo precedente, Alice ha ricevuto bitcoin dal suo amico Joe in cambio di denaro. Quella transazione ha creato un valore bitcoin bloccato dalla chiave di Alice. La sua nuova transazione a Bob's Cafe fa riferimento alla transazione precedente come input e crea nuovi output per pagare la tazza di caffè e ricevere il resto. Le transazioni formano una catena, in cui gli input dell'ultima transazione corrispondono agli output delle transazioni precedenti. La chiave di Alice fornisce la firma che sblocca quelle uscite di transazione precedenti, dimostrando così alla rete bitcoin di essere proprietaria dei fondi. Lei allega il pagamento per il caffè all'indirizzo di Bob, quindi "carica" quell'output con il requisito che Bob produca una firma per poter spendere tale importo. Questo rappresenta un trasferimento di valore tra Alice e Bob. Questa catena di transazioni, da Joe a Alice a Bob, è illustrata in << blockchain-mnemonic >>.

[[blockchain-mnemonic]]
.Una catena di transazioni, dove l'output di una transazione è l'input della transazione successiva
image::images/mbc2_0204.png["Transaction chain"]

==== Apportare modifiche

((("cambia, crea"))) ((("cambia indirizzi"))) ((("indirizzi", "cambia indirizzi"))) Molte transazioni bitcoin includeranno uscite che fanno riferimento sia a un indirizzo del nuovo proprietario e un indirizzo del proprietario corrente, chiamato indirizzo _change_. Questo perché gli input di transazione, come le banconote, non possono essere divisi. Se acquisti un oggetto da $ 5 USD in un negozio ma usi una banconota da $ 20 per pagare l'articolo, ti aspetti di ricevere $ 15 di dollari in cambio. Lo stesso concetto si applica agli input delle transazioni bitcoin. Se hai acquistato un articolo che costa 5 bitcoin ma ha solo un input da 20 bitcoin da utilizzare, invierai un output di 5 bitcoin al proprietario del negozio e un output di 15 bitcoin a te stesso come modifica (meno eventuali commissioni di transazione applicabili). È importante sottolineare che l'indirizzo del resto non deve essere lo stesso indirizzo di quello dell'input e per motivi di privacy è spesso un nuovo indirizzo del portafoglio del proprietario.

Portafogli diversi possono utilizzare strategie diverse quando si aggregano gli input per effettuare un pagamento richiesto dall'utente. Possono aggregare molti piccoli input o utilizzarne uno uguale o superiore al pagamento desiderato. A meno che il portafoglio non possa aggregare gli input in modo tale da corrispondere esattamente al pagamento desiderato più le spese di transazione, il portafoglio dovrà generare alcuni resti. Questo è molto simile a come le persone gestiscono i contanti. Se in tasca usi sempre banconote di taglia grande, finirai con una tasca piena di spiccioli. Se usi solo gli spiccioli, avrai sempre solo banconote grandi. La gente trova inconsciamente un equilibrio tra questi due estremi e gli sviluppatori dei wallet bitcoin si sforzano di programmare questo equilibrio.

((("transazioni", "definito"))) ((("output e input", "defined"))) ((("input", see = "output e input"))) In sintesi, _transactions_ spostano valore da _transaction inputs_ a _transaction outputs_. Un input è un riferimento all'output di una transazione precedente, che mostra da dove proviene il valore. Un output di transazione invia un valore specifico ad un indirizzo bitcoin di un nuovo proprietario e può includere un output di resto al proprietario originale. Gli output di una transazione possono essere utilizzati come input in una nuova transazione, creando così una catena di proprietà quando il valore viene spostato da proprietario a proprietario (si veda << blockchain-mnemonic >>).

==== Forme di Transazioni Comuni

La forma più comune di transazione è un semplice pagamento da un indirizzo a un altro, che spesso include alcuni "resti" restituiti al proprietario originale. Questo tipo di transazione ha un input e due output ed è mostrato in << transaction-common >>.

[[transaction-common]]
.Transazioni più comuni
image::images/mbc2_0205.png["Common Transaction"]

Un'altra forma comune di transazione è quella che aggrega multipli input in un singolo output (vedi <<transaction-aggregating>>). Questo rappresenta l'equivalente nel mondo'reale dello scambiare una pila di monete e banconote per una banconota singola di valore maggiore. Transazioni come queste sono talvolta generate da applicazioni wallet per "far pulizia" di transazioni di valore piccolo che sono state ricevute come resto dei precedenti pagamenti.

[[transaction-aggregating]]
.Transazioni aggregatrici
image::images/mbc2_0206.png["Aggregating Transaction"]

Infine, un altro tipo di transazione che viene spesso visualizzata sul registro di bitcoin è una transazione che distribuisce un input a più output che rappresentano più destinatari (vedere << transaction-distributioning >>). Questo tipo di transazione viene talvolta utilizzato da entità commerciali per distribuire fondi, ad esempio quando si elaborano pagamenti di salari a più dipendenti. (("", Startref = "Tover02")))

[[transaction-distributing]]
.Transazioni che distribuiscono fondi
image::images/mbc2_0207.png["Distributing Transaction"]

=== Costruire una Transaction

((("transaction", "constructing", id = "Tconstruct02"))) ((("portafogli", "costruire transazioni"))) Il wallet di Alice contiene tutta la logica per selezionare gli input e gli output appropriati per creare una transazione sulle richieste di Alice. Alice ha solo bisogno di specificare una destinazione e una quantità, e il resto avviene nell'applicazione wallet senza che lei veda i dettagli. È importante sottolineare che un wallet può costruire transazioni anche se è completamente offline. E' come compilare un assegno a casa e successivamente inviarlo alla banca in una busta, allo stesso modo la transazione non ha bisogno di essere costruita e firmata mentre il wallet è connesso alla rete bitcoin.

==== Ottenere gli Input Giusti

((("output e input", "localizzazione e tracking degli input"))) Il portafoglio di Alice deve prima trovare input che possano pagare l'importo che lei desidera inviare a Bob. La maggior parte dei wallet tiene traccia di tutte le uscite disponibili che appartengono agli indirizzi nel portafoglio. Pertanto, il portafoglio di Alice conterrebbe una copia dell'uscita della transazione dalla transazione di Joe, che è stata creata in cambio di denaro  (vedere <<getting_first_bitcoin>> ). Un'applicazione portafoglio bitcoin che viene eseguita come client full-node contiene effettivamente una copia di ogni output non speso da ogni transazione nella blockchain. Ciò consente ad un portafoglio di costruire input di transazione e di verificare rapidamente le transazioni in entrata come aventi input corretti. Tuttavia, poiché un client full-node occupa molto spazio su disco, la maggior parte dei wallet utente esegue client "leggeri" che tracciano solo gli output non spenti dell'utente.

Se l'applicazione del portafoglio non mantiene una copia delle transazioni non spese, può interrogare la rete bitcoin per recuperare queste informazioni utilizzando una varietà di API disponibili fornite da diversi provider o interrogando un nodo completo utilizzando una chiamata API (Application Programming Interface). <example_2-2> mostra una richiesta API, costruita come comando HTTP GET su un URL specifico. Questo URL restituirà tutte le transazioni non spese di un indirizzo, fornendo a qualsiasi applicazione le informazioni necessarie per costruire gli input di transazione spendibili. Usiamo il semplice client HTTP della riga di comando _cURL_ per recuperare la risposta

[[example_2-2]]
.Ricerca tutti gli unspent output (output non spesi) per l'indirizzo bitcoin di Alice
====
[source,bash]
----
$ curl https://blockchain.info/unspent?active=1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK
----
====

[source,json]
----
{

	"unspent_outputs":[

		{
			"tx_hash":"186f9f998a5...2836dd734d2804fe65fa35779",
			"tx_index":104810202,
			"tx_output_n": 0,
			"script":"76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac",
			"value": 10000000,
			"value_hex": "00989680",
			"confirmations":0
		}

	]
}
----


La risposta nell'<<example_2-2>> mostra un unspent output (un output che non è stato ancora speso) di proprietà dell'indirizzo di Alice  +1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK+. La risposta include una referenza alla transazione nella quale questo unspent output è contenuto (il pagamento fatto da Joe) e il suo valore in satoshi, 10 milioni, equivalente a 0.10 bitcoin. Con questa informazione, l'applicazione wallet di Alice può costruire la transazione per trasferire quel valore all'indirizzo della nuova proprietaria.

[TIP]
====
Guarda https://www.blockchain.com/btc/tx/7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18[transaction da Joe a Alice].
====

Come puoi vedere, il portafoglio di Alice contiene abbastanza bitcoin in una singola transazione non spesa per pagare la tazza di caffè. Se questo non fosse stato il caso, l'applicazione del portafoglio di Alice avrebbe dovuto "rovistare" attraverso una pila di transazioni non spese più piccole, come raccogliere delle monete da una borsa finché non trovi abbastanza soldi per pagare per il caffè. In entrambi i casi, potrebbe essere necessario ricevere del resto, che vedremo nella prossima sezione, che spiegherà come l'applicazione del portafoglio crea gli output di transazione (pagamenti).


==== Creare gli Output

((("outputs and inputs", "creating outputs")))A transaction output is created in the form of a script that creates an encumbrance on the value and can only be redeemed by the introduction of a solution to the script. In simpler terms, Alice's transaction output will contain a script that says something like, "This output is payable to whoever can present a signature from the key corresponding to Bob's address." Because only Bob has the wallet with the keys corresponding to that address, only Bob's wallet can present such a signature to redeem this output. Alice will therefore "encumber" the output value with a demand for a signature from Bob.

This transaction will also include a second output, because Alice's funds are in the form of a 0.10 BTC output, too much money for the 0.015 BTC cup of coffee. Alice will need 0.085 BTC in change. Alice's change payment is created by Alice's wallet as an output in the very same transaction as the payment to Bob. Essentially, Alice's wallet breaks her funds into two payments: one to Bob and one back to herself. She can then use (spend) the change output in a subsequent transaction.

Finally, for the transaction to be processed by the network in a timely fashion, Alice's wallet application will add a small fee. This is not explicit in the transaction; it is implied by the difference between inputs and outputs. If instead of taking 0.085 in change, Alice creates only 0.0845 as the second output, there will be 0.0005 BTC (half a millibitcoin) left over. The input's 0.10 BTC is not fully spent with the two outputs, because they will add up to less than 0.10. The resulting difference is the _transaction fee_ that is collected by the miner as a fee for validating and including the transaction in a block to be recorded on the blockchain.

La transazione risultante può essere vista utilizzando un'applicazione web blockchain explorer, come mostrato in <<transaction-alice>>.

[[transaction-alice]]
[role="smallerseventyfive"]
.La transazione di Alice al Bar di Bob
image::images/mbc2_0208.png["Alice Coffee Transaction"]

[[transaction-alice-url]]
[TIP]
====
View the https://www.blockchain.com/btc/tx/0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2[transaction from Alice to Bob's Cafe].
====

==== Aggiungere la Transazione al Ledger (libro mastro)

The transaction created by Alice's wallet application is 258 bytes long and contains everything necessary to confirm ownership of the funds and assign new owners. Now, the transaction must be transmitted to the bitcoin network where it will become part of the blockchain. In the next section we will see how a transaction becomes part of a new block and how the block is "mined." Finally, we will see how the new block, once added to the blockchain, is increasingly trusted by the network as more blocks are added.

===== Transmettendo la transaction

((("propagation", "process of")))Because the transaction contains all the information necessary to process, it does not matter how or where it is transmitted to the bitcoin network. The bitcoin network is a peer-to-peer network, with each bitcoin client participating by connecting to several other bitcoin clients. The purpose of the bitcoin network is to propagate transactions and blocks to all participants.

===== Come si propaga

((("bitcoin nodes", "defined")))((("nodes", see="bitcoin nodes")))Any system, such as a server, desktop application, or wallet, that participates in the bitcoin network by "speaking" the bitcoin protocol is called a _bitcoin node_. Alice's wallet application can send the new transaction to any bitcoin node it is connected to over any type of connection: wired, WiFi, mobile, etc.  Her bitcoin wallet does not have to be connected to Bob's bitcoin wallet directly and she does not have to use the internet connection offered by the cafe, though both those options are possible, too. ((("propagation", "flooding technique")))((("flooding technique")))Any bitcoin node that receives a valid transaction it has not seen before will immediately forward it to all other nodes to which it is connected, a propagation technique known as _flooding_. Thus, the transaction rapidly propagates out across the peer-to-peer network, reaching a large percentage of the nodes within a few seconds.

===== Il Punto di Vista di Bob

If Bob's bitcoin wallet application is directly connected to Alice's wallet application, Bob's wallet application might be the first node to receive the transaction. However, even if Alice's wallet sends the transaction through other nodes, it will reach Bob's wallet within a few seconds. Bob's wallet will immediately identify Alice's transaction as an incoming payment because it contains outputs redeemable by Bob's keys. Bob's wallet application can also independently verify that the transaction is well formed, uses previously unspent outputs, and contains sufficient transaction fees to be included in the next block. At this point Bob can assume, with little risk, that the transaction will shortly be included in a block and confirmed.

[TIP]
====
((("confirmations", "of small-value transactions", secondary-sortas="small-value transactions")))A common misconception about bitcoin transactions is that they must be "confirmed" by waiting 10 minutes for a new block, or up to 60 minutes for a full six confirmations. Although confirmations ensure the transaction has been accepted by the whole network, such a delay is unnecessary for small-value items such as a cup of coffee. A merchant may accept a valid small-value transaction with no confirmations, with no more risk than a credit card payment made without an ID or a signature, as merchants routinely accept today.((("", startref="Tconstruct02")))
====

=== Il Mining di Bitcoin

((("mining and consensus", "overview of", id="MACover02")))((("blockchain (the)", "overview of mining", id="BToverview02")))Alice's transaction is now propagated on the bitcoin network. It does not become part of the _blockchain_ until it is verified and included in a block by a process called _mining_. See <<mining>> for a detailed explanation.

Il sistema della fiducia usato da bitcoin è basato sulla computazione. Le transazioni sono raggruppate in _blocchi_, che richiedono un'enorme quanità di potenza computazionale per essere verificate come valide. Il processo di mining in bitcoin serve a due scopi: 

* ((("mining and consensus", "consensus rules", "security provided by")))((("consensus", see="mining and consensus")))Mining nodes validate all transactions by reference to bitcoin's _consensus rules_. Therefore, mining provides security for bitcoin transactions by rejecting invalid or malformed transactions.
* Mining creates new bitcoin in each block, almost like a central bank printing new money. The amount of bitcoin created per block is limited and diminishes with time, following a fixed issuance schedule.


Mining achieves a fine balance between cost and reward. Mining uses electricity to solve a mathematical problem. A successful miner will collect a _reward_ in the form of new bitcoin and transaction fees. However, the reward will only be collected if the miner has correctly validated all the transactions, to the satisfaction of the rules of _consensus_. This delicate balance provides security for bitcoin without a central authority.

Un buon modo per descrivere l'attività di mining è quello di immaginarsi una partita di Sudoku avente un tabellone di gioco veramente enorme che si resetta ogni volta che una soluzione viene trovata e la quale difficoltà di gioco si aggiusta di modo che si impieghi approssimativamente 10 minuti per trovare una soluzione. Immaginati una partita di sudoku gigante, con una dimensione di numerose righe e colonne. Se io ti mostro un tabellone completato, tu potrai facilmente e velocemente verificarne la correttezza. Al contrario, se il tabellone ha qualche casella piena e molte vuote, ci vorrà un notevole sforzo (lavoro, "work") per risolverlo! La difficoltà del sudoku può essere aggiustata cambiando la dimensione del tabellone (aumentando o riducendo le righe e le colonne), ma potrà comunque essere verificato piuttosto facilmente anche se esso è molto grande in dimensioni. Il "problema da risolvere" usato in bitcoin è basato su di un hash crittografico e esibisce caratteristiche simili al problema di risoluzione di un puzzle come il sudoku: è asimmetricamente difficile da risolvere ma molto facile da verificare, e la sua difficoltà può essere aggiustata.

((("mining and consensus", "mining farms and pools")))In <<user-stories>>, we introduced ((("use cases", "mining for bitcoin")))Jing, an entrepreneur in Shanghai. Jing runs a _mining farm_, which is a business that runs thousands of specialized mining computers, competing for the reward. Every 10 minutes or so, Jing's mining computers compete against thousands of similar systems in a global race to find a solution to a block of transactions. ((("Proof-of-Work algorithm")))((("mining and consensus", "Proof-of-Work algorithm")))Finding such a solution, the so-called _Proof-of-Work_ (PoW), requires quadrillions of hashing operations per second across the entire bitcoin network. The algorithm for Proof-of-Work involves repeatedly hashing the header of the block and a random number with the SHA256 cryptographic algorithm until a solution matching a predetermined pattern emerges. The first miner to find such a solution wins the round of competition and publishes that block into the blockchain.

Jing started mining in 2010 using a very fast desktop computer to find a suitable Proof-of-Work for new blocks. As more miners started joining the bitcoin network, the difficulty of the problem increased rapidly. Soon, Jing and other miners upgraded to more specialized hardware, with high-end dedicated graphical processing units (GPUs), often used in gaming desktops or consoles. At the time of this writing, the difficulty is so high that it is profitable only to mine with ((("application-specific integrated circuits (ASIC)")))application-specific integrated circuits (ASIC), essentially hundreds of mining algorithms printed in hardware, running in parallel on a single silicon chip. ((("mining pools", "defined")))Jing's company also participates in a _mining pool_, which much like a lottery pool allows several participants to share their efforts and rewards. Jing's company now runs a warehouse containing thousands of  ASIC miners to mine for bitcoin 24 hours a day. The company pays its electricity costs by selling the bitcoin it is able to generate from mining, creating some income from the profits.

=== Effettuare Mining delle Transazioni presenti nei Blocchi

((("blocks", "mining transactions in")))New transactions are constantly flowing into the network from user wallets and other applications. As these are seen by the bitcoin network nodes, they get added to a temporary pool of unverified transactions maintained by each node. As miners construct a new block, they add unverified transactions from this pool to the new block and then attempt to prove the validity of that new block, with the mining algorithm (Proof-of-Work). The process of mining is explained in detail in <<mining>>.

Transactions are added to the new block, prioritized by the highest-fee transactions first and a few other criteria. Each miner starts the process of mining a new block of transactions as soon as he receives the previous block from the network, knowing he has lost that previous round of competition. He immediately creates a new block, fills it with transactions and the fingerprint of the previous block, and starts calculating the Proof-of-Work for the new block. Each miner includes a special transaction in his block, one that pays his own bitcoin address the block reward (currently 6.25 newly created bitcoin) plus the sum of transaction fees from all the transactions included in the block. If he finds a solution that makes that block valid, he "wins" this reward because his successful block is added to the global blockchain and the reward transaction he included becomes spendable. ((("mining pools", "operation of")))Jing, who participates in a mining pool, has set up his software to create new blocks that assign the reward to a pool address. From there, a share of the reward is distributed to Jing and other miners in proportion to the amount of work they contributed in the last round.

((("candidate blocks")))((("blocks", "candidate blocks")))Alice's transaction was picked up by the network and included in the pool of unverified transactions. Once validated by the mining software it was included in a new block, called a _candidate block_, generated by Jing's mining pool. All the miners participating in that mining pool immediately start computing Proof-of-Work for the candidate block. Approximately five minutes after the transaction was first transmitted by Alice's wallet, one of Jing's ASIC miners found a solution for the candidate block and announced it to the network. Once other miners validated the winning block they started the race to generate the next block.

Jing's winning block became part of the blockchain as block #277316, containing 419 transactions, including Alice's transaction. The block containing Alice's transaction is counted as one "confirmation" of that transaction.

[TIP]
====
You can see the block that includes https://blockchain.info/btc/block/277316[Alice's transaction].
====

((("confirmations", "role in transactions")))Approximately 19 minutes later, a new block, #277317, is mined by another miner. Because this new block is built on top of block #277316 that contained Alice's transaction, it added even more computation to the blockchain, thereby strengthening the trust in those transactions. Each block mined on top of the one containing the transaction counts as an additional confirmation for Alice's transaction. As the blocks pile on top of each other, it becomes exponentially harder to reverse the transaction, thereby making it more and more trusted by the network.

((("genesis block")))((("blocks", "genesis block")))((("blockchain (the)", "genesis block")))In the diagram in <<block-alice1>>,  we can see block #277316, which contains Alice's transaction. Below it are 277,316 blocks (including block #0), linked to each other in a chain of blocks (blockchain) all the way back to block #0, known as the _genesis block_. Over time, as the "height" in blocks increases, so does the computation difficulty for each block and the chain as a whole. The blocks mined after the one that contains Alice's transaction act as further assurance, as they pile on more computation in a longer and longer chain. By convention, any block with more than six confirmations is considered irrevocable, because it would require an immense amount of computation to invalidate and recalculate six blocks. We will examine the process of mining and the way it builds trust in more detail in <<mining>>.((("", startref="BToverview02")))((("", startref="MACover02")))

[[block-alice1]]
.La transazione di Alice inclusa nel blocco #277316
image::images/mbc2_0209.png["Alice's transaction included in a block"]

=== Spendere la Transaction

((("spending bitcoin", "simple-payment-verification (SPV)")))((("simple-payment-verification (SPV)")))Now that Alice's transaction has been embedded in the blockchain as part of a block, it is part of the distributed ledger of bitcoin and visible to all bitcoin applications. Each bitcoin client can independently verify the transaction as valid and spendable. Full-node clients can track the source of the funds from the moment the bitcoin were first generated in a block, incrementally from transaction to transaction, until they reach Bob's address. Lightweight clients can do what is called a simplified payment verification (see <<spv_nodes>>) by confirming that the transaction is in the blockchain and has several blocks mined after it, thus providing assurance that the miners accepted it as valid.

Bob can now spend the output from this and other transactions. For example, Bob can pay a contractor or supplier by transferring value from Alice's coffee cup payment to these new owners. Most likely, Bob's bitcoin software will aggregate many small payments into a larger payment, perhaps concentrating all the day's bitcoin revenue into a single transaction. This would aggregate the various payments into a single output (and a single address). For a diagram of an aggregating transaction, see <<transaction-aggregating>>.

As Bob spends the payments received from Alice and other customers, he extends the chain of transactions. Let's assume that Bob pays his web designer Gopesh((("use cases", "offshore contract services"))) in Bangalore for a new web page. Now the chain of transactions will look like <<block-alice2>>.

[[block-alice2]]
.La transazione di Alice come parte di una catena di transazioni da Joe a Gopesh
image::images/mbc2_0210.png["Alice's transaction as part of a transaction chain"]

In this chapter, we saw how transactions build a chain that moves value from owner to owner. We also tracked Alice's transaction, from the moment it was created in her wallet, through the bitcoin network and to the miners who recorded it on the blockchain. In the rest of this book, we will examine the specific technologies behind wallets, addresses, signatures, transactions, the network, and finally mining.((("", startref="BCover02")))((("", startref="DCSover02"))) ((("", startref="UCcoffee02")))