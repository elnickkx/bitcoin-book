[[appdx_bx]]
[appendix]

== Comandi Bitcoin Explorer (bx)

((("Bitcoin Explorer (bx) commands", id="BX18_1", range="startofrange")))Bitcoin Explorer (bx) è un tool command-line che offre una varietà di comandi per manipolare le chiavi e la costruzione delle transazioni. E' parte di libbitcoin bitcoin library.

----
Utilizzo: bx COMMAND [--help]

Info: I comandi bx sono:

address-decode
address-embed
address-encode
address-validate
base16-decode
base16-encode
base58-decode
base58-encode
base58check-decode
base58check-encode
base64-decode
base64-encode
bitcoin160
bitcoin256
btc-to-satoshi
ec-add
ec-add-secrets
ec-multiply
ec-multiply-secrets
ec-new
ec-to-address
ec-to-public
ec-to-wif
fetch-balance
fetch-header
fetch-height
fetch-history
fetch-stealth
fetch-tx
fetch-tx-index
hd-new
hd-private
hd-public
hd-to-address
hd-to-ec
hd-to-public
hd-to-wif
help
input-set
input-sign
input-validate
message-sign
message-validate
mnemonic-decode
mnemonic-encode
ripemd160
satoshi-to-btc
script-decode
script-encode
script-to-address
seed
send-tx
send-tx-node
send-tx-p2p
settings
sha160
sha256
sha512
stealth-decode
stealth-encode
stealth-public
stealth-secret
stealth-shared
tx-decode
tx-encode
uri-decode
uri-encode
validate-tx
watch-address
wif-to-ec
wif-to-public
wrap-decode
wrap-encode
----

Per maggiori informazioni, vedere https://github.com/libbitcoin/libbitcoin-explorer[Bitcoin Explorer homepage] and https://github.com/libbitcoin/libbitcoin-explorer/wiki[Bitcoin Explorer user documentation].

=== Esempi di bx Command Use

Guardiamo alcuni esempi d'uso di Bitcoin Explorer commands per familiarizzare con chiavi ed indirizzi.

Generare a "seed" casuale usando il comando +seed+, che usa il generatore di numeri casuali del sistema operativo. Passiamo il seed al comando +ec-new+ per generare una nuova chiave privata. Salviamo l'output standard entro il file _private_key_:

----
$ bx seed | bx ec-new > private_key
$ cat private_key
73096ed11ab9f1db6135857958ece7d73ea7c30862145bcc4bbc7649075de474
----

Ora, generiamo la chiave pubblica dalla chiave privata, usando il comando +ec-to-public+. Passiamo il file _private_key_ file nell'input standard e salviamo l'output standard del comando in un nuovo file _public_key_:

----
$ bx ec-to-public < private_key > public_key
$ cat public_key
02fca46a6006a62dfdd2dbb2149359d0d97a04f430f12a7626dd409256c12be500
----

Possiamo riformattare la +public_key+ come un indirizzo, usando il comando +ec-to-address+. Passiamo la _public_key_ entro lo standard input:

----
$ bx ec-to-address < public_key
17re1S4Q8ZHyCP8Kw7xQad1Lr6XUzWUnkG
----

Le chiavi generate in questo mondo producono un wallet non deterministico type-0  Questo significa che ogni chiave è generata da un seed indipendente. I comandi di Bitcoin Explorer possono anche generale chiavi deterministicamente, in accordo con BIP-32. In questo caso, è creata una "master" key da un seed e quindi estesa deterministicamente per produrre un albero di sottochiavi, risultando un wallet deterministico type-2.

Primo, usiamo il comando +seed+ and +hd-new+ per generare una master key che sarà usata come base per derivare una gerarchia di chiavi:

----
$ bx seed > seed
$ cat seed
eb68ee9f3df6bd4441a9feadec179ff1

$ bx hd-new < seed > master
$ cat master
xprv9s21ZrQH143K2BEhMYpNQoUvAgiEjArAVaZaCTgsaGe6LsAnwubeiTcDzd23mAoyizm9cApe51gNfLMkBqkYoWWMCRwzfuJk8RwF1SVEpAQ
----

Ora usiamo il comando +hd-private+ per generare a "account" key consolidato e una sequenza di due chiavi private entro l'account:

----
$ bx hd-private --hard < master > account
$ cat account
xprv9vkDLt81dTKjwHB8fsVB5QK8cGnzveChzSrtCfvu3aMWvQaThp59ueufuyQ8Qi3qpjk4aKsbmbfxwcgS8PYbgoR2NWHeLyvg4DhoEE68A1n

$ bx hd-private --index 0 < account
xprv9xHfb6w1vX9xgZyPNXVgAhPxSsEkeRcPHEUV5iJcVEsuUEACvR3NRY3fpGhcnBiDbvG4LgndirDsia1e9F3DWPkX7Tp1V1u97HKG1FJwUpU

$ bx hd-private --index 1 < account
xprv9xHfb6w1vX9xjc8XbN4GN86jzNAZ6xHEqYxzbLB4fzHFd6VqCLPGRZFsdjsuMVERadbgDbziCRJru9n6tzEWrASVpEdrZrFidt1RDfn4yA3
----

Quindi, usiamo il comando +hd-public+ per generare la corrispondente sequenza di due chiavi pubbliche:

----
$ bx hd-public --index 0 < account
xpub6BH1zcTuktiFu43rUZ2gXqLgzu5F3tLEeTQ5t6iE3aQtM2VMTxMcyLN9fYHiGhGpQe9QQYmqL2eYPFJ3vezHz5wzaSW4FiGrseNDR4LKqTy

$ bx hd-public --index 1 < account
xpub6BH1zcTuktiFx6CzhPbGjG3UYQ13WR16CmtbPiagEKpEVtpyjshWyMaMV1cn7nUPUkgQHPVXJVqsrA8xWbGQDhohEcDFTEYMvYzwRD7Juf8
----

Le chiavi pubbliche possono anche essere derivate dalle loro corrispondenti chiavi private usando il comando +hd-to-public+ :

----
$ bx hd-private --index 0 < account | bx hd-to-public
xpub6BH1zcTuktiFu43rUZ2gXqLgzu5F3tLEeTQ5t6iE3aQtM2VMTxMcyLN9fYHiGhGpQe9QQYmqL2eYPFJ3vezHz5wzaSW4FiGrseNDR4LKqTy

$ bx hd-private --index 1 < account | bx hd-to-public
xpub6BH1zcTuktiFx6CzhPbGjG3UYQ13WR16CmtbPiagEKpEVtpyjshWyMaMV1cn7nUPUkgQHPVXJVqsrA8xWbGQDhohEcDFTEYMvYzwRD7Juf8
----

Possiamo generare un numero di chiavi praticamente senza limiti in una catena deterministica, tutte derivate da un singolo seed. Questa tecnica è usata in molte applicazioni wallet per generare chiavi che possono essere archiviate (backup) e ripristinate con un singolo valore seed. E' molto piu facile che dover effettuare il backup del wallet con tutte le chiavi generate randomicamente ogni volta che si crea una nuova chiave.

Il seed può essere codificato usando il comando +mnemonic-encode+ :

----
$ bx hd-mnemonic < seed > words
adore repeat vision worst especially veil inch woman cast recall dwell appreciate
----

Il seed può essere decodificato usando il comando +mnemonic-dencode+ :

----
$ bx mnemonic-decode < words
eb68ee9f3df6bd4441a9feadec179ff1
----

La codifica mnemonica può rendere il seed più facile da registrare e da ricordare.(((range="endofrange", startref="BX18_1")))