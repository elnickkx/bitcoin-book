[[Blockchain]]
== Die Blockchain

=== Einführung

((("blockchain (the)", "overview of")))The blockchain data structure is an ordered, back-linked list of blocks of transactions. The blockchain can be stored as a flat file, or in a simple database. The Bitcoin Core client stores the blockchain metadata using Google's LevelDB database. Blocks are linked "back," each referring to the previous block in the chain. ((("blocks", "block height")))The blockchain is often visualized as a vertical stack, with blocks layered on top of each other and the first block serving as the foundation of the stack. The visualization of blocks stacked on top of each other results in the use of terms such as "height" to refer to the distance from the first block, and "top" or "tip" to refer to the most recently added block.

((("blocks", "block hash")))((("blocks", "genesis block")))((("blocks", "parent blocks")))((("genesis block")))((("parent blocks")))Each block within the blockchain is identified by a hash, generated using the SHA256 cryptographic hash algorithm on the header of the block. Each block also references a previous block, known as the _parent_ block, through the "previous block hash" field in the block header. In other words, each block contains the hash of its parent inside its own header. The sequence of hashes linking each block to its parent creates a chain going back all the way to the first block ever created, known as the _genesis block_.

Obwohl ein Block nur ein Elternteil hat, kann er vorübergehend mehrere Kinder haben. Jeder der Kinder bezieht sich auf denselben Block wie sein Elternteil und enthält denselben (übergeordneten) Hash im Feld "vorheriger Blockhash". Mehrere Kinder entstehen während eines Blockketten "Forks", eine vorübergehende Situation, die auftritt, wenn verschiedene Blöcke fast gleichzeitig von verschiedenen Minern entdeckt werden (siehe <<forks>>). Schließlich wird nur ein Teil des Kindblocks zur Blockkette und die "Fork" ist aufgelöst. Obwohl ein Block mehr als ein Kind haben kann, kann jeder Block nur ein Elternteil haben. Dies liegt daran, dass ein Block ein einziges "vorheriges Block-Hash" -Feld hat, das auf seinen einzigen Elternblock verweist.

The "previous block hash" field is inside the block header and thereby affects the _current_ block's hash. The child's own identity changes if the parent's identity changes. When the parent is modified in any way, the parent's hash changes. The parent's changed hash necessitates a change in the "previous block hash" pointer of the child. This in turn causes the child's hash to change, which requires a change in the pointer of the grandchild, which in turn changes the grandchild, and so on. This cascade effect ensures that once a block has many generations following it, it cannot be changed without forcing a recalculation of all subsequent blocks. Because such a recalculation would require enormous computation (and therefore energy consumption), the existence of a long chain of blocks makes the blockchain's deep history immutable, which is a key feature of bitcoin's security.

One way to think about the blockchain is like layers in a geological formation, or glacier core sample. The surface layers might change with the seasons, or even be blown away before they have time to settle. But once you go a few inches deep, geological layers become more and more stable. By the time you look a few hundred feet down, you are looking at a snapshot of the past that has remained undisturbed for millions of years. In the blockchain, the most recent few blocks might be revised if there is a chain recalculation due to a fork. The top six blocks are like a few inches of topsoil. But once you go more deeply into the blockchain, beyond six blocks, blocks are less and less likely to change. ((("transactions", "coinbase transactions")))((("coinbase transactions")))After 100 blocks back, there is so much stability that the coinbase transaction—the transaction containing newly mined bitcoin—can be spent. A few thousand blocks back (a month) and the blockchain is settled history, for all practical purposes. While the protocol always allows a chain to be undone by a longer chain and while the possibility of any block being reversed always exists, the probability of such an event decreases as time passes until it becomes infinitesimal.

=== Aufbau eines Blocks

((("blocks", "structure of")))((("blockchain (the)", "block structure")))A block is a container data structure that aggregates transactions for inclusion in the public ledger, the blockchain. The block is made of a header, containing metadata, followed by a long list of transactions that make up the bulk of its size. The block header is 80 bytes, whereas the average transaction is at least 400 bytes and the average block contains more than 1900 transactions. A complete block, with all transactions, is therefore 10,000 times larger than the block header. <<block_structure1>> describes the structure of a block.

[[block_structure1]]
[role="pagebreak-before"]
Die Struktur eines Blocks
[options="header"]
|=======
|Größe| Feld | Beschreibung
| 4 Bytes | Blockgröße | Die Größe des Blocks, in Bytes, folgt diesem Feld
| 80 bytes | Blockkopf | Mehrere Felder bilden den Blockkopf
| 1&#x2013;9 bytes (VarInt) | Transaction Counter | How many transactions follow
| Variable | Transaktionen | Die in diesem Block aufgezeichneten Transaktionen
|=======

[[block_header]]
=== Blockkopf

((("blocks", "headers")))((("blockchain (the)", "block headers")))((("headers")))The block header consists of three sets of block metadata. First, there is a reference to a previous block hash, which connects this block to the previous block in the blockchain. The second set of metadata, namely the _difficulty_, _timestamp_, and _nonce_, relate to the mining competition, as detailed in <<mining>>. The third piece of metadata is the merkle tree root, a data structure used to efficiently summarize all the transactions in the block. <<block_header_structure_ch09>> describes the structure of a block header.


[[block_header_structure_ch09]]
Die Struktur des Blockkopfes
[options="header"]
|=======
|Größe| Feld | Beschreibung
| 4 Bytes | Version | Eine Versionsnummer, um Software- / Protokoll-Upgrades zu verfolgen
| 32 Bytes | Vorheriger Block Hash | Ein Hinweis auf den Hash des vorherigen (übergeordneten) Blocks in der Kette
| 32 bytes | Merkle Root | Ein Hash der Wurzel des Merkle-Baums der Transaktionen dieses Blocks
| 4 Bytes | Zeitstempel | Die ungefähre Erstellungszeit dieses Blocks (Sekunden von Unix Epoch)
| 4 bytes | Difficulty Target | The Proof-of-Work algorithm difficulty target for this block
| 4 bytes | Nonce | A counter used for the Proof-of-Work algorithm
|=======

The nonce, difficulty target, and timestamp are used in the mining process and will be discussed in more detail in <<mining>>.

[[block_hash]]
=== Block Identifikationsmerkmal: Blockkopf Hash und Block Höhe

((("blockchain (the)", "block identifiers")))((("blocks", "block height")))((("blocks", "block hash")))The primary identifier of a block is its cryptographic hash, a digital fingerprint, made by hashing the block header twice through the SHA256 algorithm. The resulting 32-byte hash is called the _block hash_ but is more accurately the _block header hash_, pass:[<span role="keep-together">because only the block header is used to compute it. For example,</span>] +000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f+ is the block hash of the first bitcoin block ever created. The block hash identifies a block uniquely and unambiguously and can be independently derived by any node by simply hashing the block header.

Beachten Sie, dass der Blockhash nicht tatsächlich in der Datenstruktur des Bausteins enthalten ist, weder wenn der Baustein im Netzwerk übertragen wird, noch wenn er auf dem persistenten Speicher eines Knotens als Teil der Blockkette gespeichert ist. Stattdessen wird der Hash des Blocks von jedem Knoten berechnet, wenn der Block vom Netzwerk empfangen wird. Der Blockhash kann in einer separaten Datenbanktabelle als Teil der Metadaten des Blocks gespeichert werden, um die Indizierung und das schnellere Abrufen von Blöcken von der Festplatte zu erleichtern.

A second way to identify a block is by its position in the blockchain, called the pass:[<span role="keep-together"><em>block height</em>. The first block ever created is at block height 0 (zero) and is the</span>] pass:[<span role="keep-together">same block that was previously referenced by the following block hash</span>] +000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f+. A block can thus be identified in two ways: by referencing the block hash or by referencing the block height. Each subsequent block added "on top" of that first block is one position "higher" in the blockchain, like boxes stacked one on top of the other. The block height on January 1, 2017 was approximately 446,000, meaning there were 446,000 blocks stacked on top of the first block created in January 2009.

Im Gegensatz zum Blockhash ist die Blockhöhe kein eindeutiger Bezeichner. Obwohl ein einzelner Block immer eine spezifische und invariante Blockhöhe hat, ist das umgekehrte nicht wahr - die Blockhöhe identifiziert nicht immer einen einzelnen Block. Zwei oder mehr Blöcke könnten die gleiche Blockhöhe haben, die für die gleiche Position in der Blockkette konkurrieren. Dieses Szenario wird ausführlich im Abschnitt <<forks>> diskutiert. Die Blockhöhe ist auch kein Teil der Datenstruktur des Blocks. Sie wird nicht im Block gespeichert. Jeder Knoten identifiziert dynamisch die Position eines Blocks (Höhe) in der Blockkette, wenn er von dem Bitcoin-Netzwerk empfangen wird. Die Blockhöhe könnte auch als Metadaten in einer indizierten Datenbanktabelle für schnelleren Abruf gespeichert werden.

[TIP]
====
Der  _Block Hash_ eines Block's identifiziert einen einzelnen Block immer eindeutig. Ein Block hat auch immer eine bestimmte _Block Höhe_. Es ist jedoch nicht immer der Fall, dass eine bestimmte Blockhöhe einen einzelnen Block identifizieren kann. Vielmehr könnten zwei oder mehr Blöcke um eine einzelne Position in der Blockkette konkurrieren.
====

=== Der Genesis Block

((("blocks", "genesis block")))((("blockchain (the)", "genesis block")))The first block in the blockchain is called the genesis block and was created in 2009. It is the common ancestor of all the blocks in the blockchain, meaning that if you start at any block and follow the chain backward in time, you will eventually arrive at the genesis block.

Jeder Knoten beginnt immer mit einer Blockkette von mindestens einem Block, da der Genesis-Block in der Bitcoin-Client-Software statisch codiert ist, so dass er nicht verändert werden kann. Jeder Knoten kennt immer den Hash und die Struktur des Genesis-Blocks, die feste Zeit, in der er erstellt wurde, und sogar die einzelnen enthaltenen Transaktion. So hat jeder Knoten den Ausgangspunkt für die Blockkette, eine sicheren "Wurzel", aus dem man eine vertrauenswürdige Blockkette baut.

See the statically encoded genesis block inside the Bitcoin Core client, in http://bit.ly/1x6rcwP[_chainparams.cpp_].

Der folgende Bezeichner-Hash gehört zum Genesis-Block:

----
000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
----

You can search for that block hash in any block explorer website, such as _blockchain.info_, and you will find a page describing the contents of this block, with a URL containing that hash:

https://blockchain.info/block/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f

Verwenden des Bitcoin Core-Referenzclients auf der Befehlszeile:

----
$ bitcoin-cli getblock 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
----
[source,json]
----
{
    "hash" : "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
    "confirmations" : 308321,
    "size" : 285,
    "height" : 0,
    "version" : 1,
    "merkleroot" : "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b",
    "tx" : [
        "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"
    ],
    "time" : 1231006505,
    "nonce" : 2083236893,
    "bits" : "1d00ffff",
    "difficulty" : 1.00000000,
    "nextblockhash" : "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048"
}
----

Der Genese-Block enthält eine versteckte Nachricht darin. Die Coinbase-Transaktionseingabe enthält den Text "The Times 03 / Jan / 2009 Kanzler am Rande der zweiten Rettung für Banken". Diese Botschaft sollte den Beweis für das früheste Datum, in dem dieser Block erstellt wurde, mit der Überschrift der Schlagzeile der britischen Zeitung _The Times_ anbieten. Es dient auch als Zunge-in-Wange Erinnerung an die Bedeutung eines unabhängigen Geldsystems, mit dem Start des Bitcoins, der gleichzeitig mit einer beispiellosen weltweiten Währungskrise auftritt. Die Nachricht wurde in den ersten Block von Satoshi Nakamoto, dem Schöpfer Bitcoins, eingebettet.

=== Verknüpfung von Blöcken in der Blockkette

((("blocks", "linking blocks in the blockchain")))((("blockchain (the)", "linking blocks in the blockchain")))Bitcoin full nodes maintain a local copy of the blockchain, starting at the genesis block. The local copy of the blockchain is constantly updated as new blocks are found and used to extend the chain. As a node receives incoming blocks from the network, it will validate these blocks and then link them to the existing blockchain. To establish a link, a node will examine the incoming block header and look for the "previous block hash."

Let's assume, for example, that a node has 277,314 blocks in the local copy of the blockchain. The last block the node knows about is block 277,314, with a block header hash of:

----
00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249
----

Der Bitcoin-Knoten erhält dann einen neuen Baustein aus dem Netzwerk, den er wie folgt analysiert:

[source,json]
----
{
    "size" : 43560,
    "version" : 2,
    "previousblockhash" :
        "00000000000000027e7ba6fe7bad39faf3b5a83daed765f05f7d1b71a1632249",
    "merkleroot" :
        "5e049f4030e0ab2debb92378f53c0a6e09548aea083f3ab25e1d94ea1155e29d",
    "time" : 1388185038,
    "difficulty" : 1180923195.25802612,
    "nonce" : 4215469401,
    "tx" : [
        "257e7497fb8bc68421eb2c7b699dbab234831600e7352f0d9e6522c7cf3f6c77",

 # [... viele weitere Transaktionen weggelassen ...]

        "05cfd38f6ae6aa83674cc99e4d75a1458c165b7ab84725eda41d018a09176634"
    ]
}
----

Wenn man diesen neuen Block betrachtet, findet der Knoten das Feld +previousblockhash+, das den Hash seines übergeordneten Blocks enthält. Es ist ein Hash, der dem Knoten bekannt ist, der des letzten Blocks auf der Kette auf der Höhe 277,314. Daher ist dieser neue Block ein Kind des letzten Blocks auf der Kette und erweitert die bestehende Blockkette. Der Knoten fügt diesen neuen Block dem Ende der Kette hinzu und macht die Blockkette länger mit einer neuen Höhe von 277.315. <<chain_of_blocks>> zeigt die Kette von drei Blöcken, verknüpft durch Referenzen im +previousblockhash+ Feld.


[[merkle_trees]]
=== Merkle Bäume

((("merkle trees", id="merkle09")))((("blockchain (the)", "merkle trees", id="BCTmerkle09")))Each block in the bitcoin blockchain contains a summary of all the transactions in the block using a _merkle tree_.

((("binary hash trees", see="merkle trees")))A _merkle tree_, also known as a _binary hash tree_, is a data structure used for efficiently summarizing and verifying the integrity of large sets of data. Merkle trees are binary trees containing cryptographic hashes. The term "tree" is used in computer science to describe a branching data structure, but these trees are usually displayed upside down with the "root" at the top and the "leaves" at the bottom of a diagram, as you will see in the examples that follow.

[[chain_of_blocks]]
[role="smallerfourtyfive"]
.Blocks linked in a chain by reference to the previous block header hash
image::images/mbc2_0901.png[]

Merkle trees are used in bitcoin to summarize all the transactions in a block, producing an overall digital fingerprint of the entire set of transactions, providing a very efficient process to verify whether a transaction is included in a block. A merkle tree is constructed by recursively hashing pairs of nodes until there is only one hash, called the _root_, or _merkle root_. The cryptographic hash algorithm used in bitcoin's merkle trees is SHA256 applied twice, also known as double-SHA256.

Wenn N Datenelemente gehasht und in einem Merkle-Baum zusammengefasst sind, können Sie überprüfen, ob ein Datenelement im Baum mit höchstens +2*log~2~(N)+ Berechnungen enthalten ist, was dies zu einer sehr effizienten Datenstruktur macht.

The merkle tree is constructed bottom-up. In the following example, we start with four transactions, A, B, C, and D, which form the _leaves_ of the merkle tree, as shown in <<simple_merkle>>. The transactions are not stored in the merkle tree; rather, their data is hashed and the resulting hash is stored in each leaf node as H~A~, H~B~, H~C~, and H~D~:

++++
<pre data-type="codelisting">
H<sub>A</sub> = SHA256(SHA256(Transaction A))
</pre>
++++

Aufeinanderfolgende Paare von Blattknoten werden dann in einem Elternknoten zusammengefasst, indem sie die beiden Hashes verketten und sie zusammenhashen. Zum Beispiel, um den übergeordneten Knoten H~AB~ zu konstruieren, werden die beiden 32-Byte-Hashes der Kinder verkettet, um eine 64-Byte-Zeichenfolge zu erzeugen. Dieser String ist dann doppelt gehashed, um den Hash des Elternknotens zu erzeugen:

++++
<pre data-type="codelisting">
H<sub>AB</sub> = SHA256(SHA256(H<sub>A</sub> + H<sub>B</sub>))
</pre>
++++

The process continues until there is only one node at the top, the node known as the merkle root. That 32-byte hash is stored in the block header and summarizes all the data in all four transactions. <<simple_merkle>> shows how the root is calculated by pair-wise hashes of the nodes.

[[simple_merkle]]
.Berechnung der Knoten in einem Merkle Baum
image::images/mbc2_0902.png["merkle_tree"]

((("balanced trees")))Because the merkle tree is a binary tree, it needs an even number of leaf nodes. If there is an odd number of transactions to summarize, the last transaction hash will be duplicated to create an even number of leaf nodes, also known as a _balanced tree_. This is shown in <<merkle_tree_odd>>, where transaction C is duplicated.

[[merkle_tree_odd]]
.Duplizieren eines Datenelements erzielt eine gerade Anzahl von Datenelementen
image::images/mbc2_0903.png["merkle_tree_odd"]

Die gleiche Methode zum Konstruieren eines Baums aus vier Transaktionen kann verallgemeinert werden, um Bäume jeder Größe zu konstruieren. In Bitcoin ist es üblich, mehrere hundert bis mehr als tausend Transaktionen in einem einzigen Block zu haben, die in genau der gleichen Weise zusammengefasst werden und nur 32 Bytes Daten als die einzige Merkle Root produzieren. In <<merkle_tree_large>> sehen Sie einen aus 16 Transaktionen aufgegebauten Baum. Zu beachten ist, dass die Wurzel  im Diagramm größer aussieht als die Blattknoten, obwohl sie genau die gleiche Größe von nur 32 Bytes hat. Ob es eine Transaktion oder hunderttausend Transaktionen im Block gibt, die Merkle Wurzel fasst sie immer in 32 Bytes zusammen.

((("authentication paths")))To prove that a specific transaction is included in a block, a node only needs to produce +log~2~(N)+ 32-byte hashes, constituting an _authentication path_ or _merkle path_ connecting the specific transaction to the root of the tree. This is especially important as the number of transactions increases, because the base-2 logarithm of the number of transactions increases much more slowly. This allows bitcoin nodes to efficiently produce paths of 10 or 12 hashes (320–384 bytes), which can provide proof of a single transaction out of more than a thousand transactions in a megabyte-sized block.

[[merkle_tree_large]]
.Ein Merkle Baum, der viele Datenelemente zusammenfasst
image::images/mbc2_0904.png["merkle_tree_large"]

In <<merkle_tree_path>>, a node can prove that a transaction K is included in the block by producing a merkle path that is only four 32-byte hashes long (128 bytes total). The path consists of the four hashes (shown with a shaded background in <<merkle_tree_path>>) H~L~, H~IJ~, H~MNOP~, and H~ABCDEFGH~. With those four hashes provided as an authentication path, any node can prove that H~K~ (with a black background at the bottom of the diagram) is included in the merkle root by computing four additional pair-wise hashes H~KL~, H~IJKL~, H~IJKLMNOP~, and the merkle tree root (outlined in a dashed line in the diagram).

[[merkle_tree_path]]
.verwendung eines Merkle Pfads zum Beweis eines enthaltenen Datenelements
image::images/mbc2_0905.png["merkle_tree_path"]


Der Code in <<merkle_example>> demonstriert den Prozess der Erstellung eines Merkle-Baums von den Blatt-Knoten Hashes bis zur Wurzel, mit der libbitcoin-Bibliothek für einige Helfer-Funktionen.

[[merkle_example]]
[role="pagebreak-before"]
.Bau eines Merkle Baums
====
[source, cpp]
----
include::code/merkle.cpp[]
----
====

<<merkle_example_run>> zeigt das Ergebnis der Kompilierung und Ausführung des Merkle-Codes.

[[merkle_example_run]]
.Kompilieren und Ausführen des Merkle Beispielcodes
====
[source,bash]
----
$ # Compile the merkle.cpp code
$ g++ -o merkle merkle.cpp $(pkg-config --cflags --libs libbitcoin)
$ # Run the merkle executable
$ ./merkle
Aktuelle Merkle Hash-Liste:
  32650049a0418e4380db0af81788635d8b65424d397170b8499cdc28c4d27006
  30861db96905c8dc8b99398ca1cd5bd5b84ac3264a4e1b3e65afa1bcee7540c4

Aktuelle Merkle Hash-Liste:
  d47780c084bad3830bcdaf6eace035e4c6cbf646d103795d22104fb105014ba3

Ergebnis: d47780c084bad3830bcdaf6eace035e4c6cbf646d103795d22104fb105014ba3

----
====

Die Effizienz der Merkle-Bäume wird deutlich, wenn die Grösse zunimmt. <<block_structure2>> zeigt die Datenmenge an, die als Merkle-Pfad ausgetauscht werden muss, um zu beweisen, dass eine Transaktion Teil eines Blocks ist.

[[block_structure2]]
.Merkle Baum Effizienz
[options="header"]
|=======
| Anzahl der Transaktionen | Ca. Größe des Blocks | Pfadgröße (Hashes) | Pfadgröße (Bytes)
| 16 Transaktionen | 4 Kilobytes | 4 Hashes | 128 Bytes
| 512 Transaktionen | 128 Kilobytes | 9 Hashes | 288 Bytes
| 2048 Transaktionen | 512 Kilobytes | 11 Hashes | 352 Bytes
| 65.535 Transaktionen | 16 Megabytes | 16 Hashes | 512 Bytes
|=======

As you can see from the table, while the block size increases rapidly, from 4 KB with 16 transactions to a block size of 16 MB to fit 65,535 transactions, the merkle path required to prove the inclusion of a transaction increases much more slowly, from 128 bytes to only 512 bytes. With merkle trees, a node can download just the block headers (80 bytes per block) and still be able to identify a transaction's inclusion in a block by retrieving a small merkle path from a full node, without storing or transmitting the vast majority of the blockchain, which might be several gigabytes in size. Nodes that do not maintain a full blockchain, called simplified payment verification (SPV) nodes, use merkle paths to verify transactions without downloading full blocks.

=== Merkle Bäume und vereinfachte Zahlungsüberprüfung (SPV)

((("simple-payment-verification (SPV)")))((("bitcoin nodes", "SPV nodes")))Merkle trees are used extensively by SPV nodes. SPV nodes don't have all transactions and do not download full blocks, just block headers. In order to verify that a transaction is included in a block, without having to download all the transactions in the block, they use an authentication path, or merkle path.

Consider, for example, an SPV node that is interested in incoming payments to an address contained in its wallet. The SPV node will establish a bloom filter (see <<bloom_filters>>) on its connections to peers to limit the transactions received to only those containing addresses of interest. When a peer sees a transaction that matches the bloom filter, it will send that block using a +merkleblock+ message. The +merkleblock+ message contains the block header as well as a merkle path that links the transaction of interest to the merkle root in the block. The SPV node can use this merkle path to connect the transaction to the block and verify that the transaction is included in the block. The SPV node also uses the block header to link the block to the rest of the blockchain. The combination of these two links, between the transaction and block, and between the block and blockchain, proves that the transaction is recorded in the blockchain. All in all, the SPV node will have received less than a kilobyte of data for the block header and merkle path, an amount of data that is more than a thousand times less than a full block (about 1 megabyte currently).((("", startref="BCTmerkle09")))((("", startref="merkle09")))

=== Bitcoin's Test Blockchains

((("blockchain (the)", "test blockchains", id="BCTtest09")))((("mainnet", seealso="blockchain (the)")))You might be surprised to learn that there is more than one bitcoin blockchain. The "main" bitcoin blockchain, the one created by Satoshi Nakamoto on January 3rd, 2009, the one with the genesis block we studied in this chapter, is called _mainnet_.  There are other bitcoin blockchains that are used for testing purposes: at this time _testnet_, _segnet_, and _regtest_. Let's look at each in turn.((("testnet", id="testnet09")))


==== Testnet&#x2014;Bitcoin's Testing Playground

Testnet is the name of the test blockchain, network, and currency that is used for testing purposes. The testnet is a fully featured live P2P network, with wallets, test bitcoin (testnet coins), mining, and all the other features of mainnet.  There are really only two differences: testnet coins are meant to be worthless and mining difficulty should be low enough that anyone can mine testnet coins relatively easily (keeping them worthless).

Any software development that is intended for production use on bitcoin's mainnet should first be tested on testnet with test coins. This protects both the developers from monetary losses due to bugs and the network from unintended behavior due to bugs.

Keeping the coins worthless and the mining easy, however, is not easy. Despite pleas from developers, some people use advanced mining equipment (GPUs and ASICs) to mine on testnet. This increases the difficulty, makes it impossible to mine with a CPU, and eventually makes it difficult enough to get test coins that people start valuing them, so they're not worthless. As a result, every now and then, the testnet has to be scrapped and restarted from a new genesis block, resetting the difficulty.

The current testnet is called _testnet3_, the third iteration of testnet, restarted in February 2011 to reset the difficulty from the previous testnet.

Keep in mind that testnet3 is a large blockchain, in excess of 20 GB in early 2017. It will take a day or so to sync fully and use up resources on your computer. Not as much as mainnet, but not exactly "lightweight" either. One good way to run a testnet node is as a virtual machine image (e.g., VirtualBox, Docker, Cloud Server, etc.) dedicated for that purpose.

===== Using testnet

Bitcoin Core, like almost all other bitcoin software, has full support for operation on testnet instead of mainnet. All of Bitcoin Core's functions work on testnet, including the wallet, mining testnet coins, and syncing a full testnet node.

To start Bitcoin Core on testnet instead of mainnet you use the +testnet+ switch:

----
$ bitcoind -testnet
----

In the logs you should see that bitcoind is building a new blockchain in the +testnet3+ subdirectory of the default bitcoind directory:

----
bitcoind: Using data directory /home/username/.bitcoin/testnet3
----

To connect to bitcoind, you use the +bitcoin-cli+ command-line tool, but you must also switch it to testnet mode:

----
$ bitcoin-cli -testnet getblockchaininfo
{
  "chain": "test",
  "blocks": 1088,
  "headers": 139999,
  "bestblockhash": "0000000063d29909d475a1c4ba26da64b368e56cce5d925097bf3a2084370128",
  "difficulty": 1,
  "mediantime": 1337966158,
  "verificationprogress": 0.001644065914099759,
  "chainwork": "0000000000000000000000000000000000000000000000000000044104410441",
  "pruned": false,
  "softforks": [

  [...]
----

You can also run on testnet3 with other full-node implementations, such as +btcd+ (written in Go) and +bcoin+ (written in JavaScript), to experiment and learn in other programming languages and frameworks.

In early 2017, testnet3 supports all the features of mainnet, including Segregated Witness (see <<segwit>>). Therefore, testnet3 can also be used to test Segregated Witness features.((("", startref="testnet09")))

==== Segnet&#x2014;The Segregated Witness Testnet


((("segnet")))In 2016, a special-purpose testnet was launched to aid in development and testing of Segregated Witness (aka segwit; see <<segwit>>). This test blockchain is called +segnet+ and can be joined by running a special version (branch) of Bitcoin Core.

((("segwit (Segregated Witness)")))Since segwit was added to testnet3, it is no longer necessary to use segnet for testing of segwit features.

In the future it is likely we will see other testnet blockchains that are specifically designed to test a single feature or major architectural change, like segnet.

==== Regtest&#x2014;The Local Blockchain

((("regtest (Regression Testing)")))Regtest, which stands for "Regression Testing," is a Bitcoin Core feature that allows you to create a local blockchain for testing purposes. Unlike testnet3, which is a public and shared test blockchain, the regtest blockchains are intended to be run as closed systems for local testing. You launch a regtest blockchain from scratch, creating a local genesis block. You may add other nodes to the network, or run it with a single node only to test the Bitcoin Core software.

To start Bitcoin Core in regtest mode, you use the +regtest+ flag:

----
$ bitcoind -regtest
----

Just like with testnet, Bitcoin Core will initialize a new blockchain under the _regtest_ subdirectory of your bitcoind default directory:

----
bitcoind: Using data directory /home/username/.bitcoin/regtest
----

To use the command-line tool, you need to specify the +regtest+ flag too. Let's try the +getblockchaininfo+ command to inspect the regtest blockchain:

----
$ bitcoin-cli -regtest getblockchaininfo
{
  "chain": "regtest",
  "blocks": 0,
  "headers": 0,
  "bestblockhash": "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",
  "difficulty": 4.656542373906925e-10,
  "mediantime": 1296688602,
  "verificationprogress": 1,
  "chainwork": "0000000000000000000000000000000000000000000000000000000000000002",
  "pruned": false,
  [...]
----

As you can see, there are no blocks yet. Let's mine some (500 blocks) and earn the reward:

----
$ bitcoin-cli -regtest generate 500
[
  "7afed70259f22c2bf11e406cb12ed5c0657b6e16a6477a9f8b28e2046b5ba1ca",
  "1aca2f154a80a9863a9aac4c72047a6d3f385c4eec5441a4aafa6acaa1dada14",
  "4334ecf6fb022f30fbd764c3ee778fabbd53b4a4d1950eae8a91f1f5158ed2d1",
  "5f951d34065efeaf64e54e91d00b260294fcdfc7f05dbb5599aec84b957a7766",
  "43744b5e77c1dfece9d05ab5f0e6796ebe627303163547e69e27f55d0f2b9353",
   [...]
  "6c31585a48d4fc2b3fd25521f4515b18aefb59d0def82bd9c2185c4ecb754327"
]
----

It will only take a few seconds to mine all these blocks, which certainly makes it easy for testing. If you check your wallet balance, you will see that you earned reward for the first 400 blocks (coinbase rewards must be 100 blocks deep before you can spend them):

----
$ bitcoin-cli -regtest getbalance
12462.50000000
----

=== Using Test Blockchains for Development

((("development environment", "test blockchains and")))Bitcoin's various blockchains (+regtest+, +segnet+, +testnet3+, +mainnet+) offer a range of testing environments for bitcoin development. Use the test blockchains whether you are developing for Bitcoin Core, or another full-node consensus client; an application such as a wallet, exchange, ecommerce site; or even developing novel smart contracts and complex scripts.

You can use the test blockchains to establish a development pipeline. Test your code locally on a +regtest+ as you develop it. Once you are ready to try it on a public network, switch to +testnet+ to expose your code to a more dynamic environment with more diversity of code and applications. Finally, once you are confident your code works as expected, switch to +mainnet+ to deploy it in production. As you make changes, improvements, bug fixes, etc., start the pipeline again, deploying each change first on +regtest+, then on +testnet+, and finally into production.((("", startref="BCTtest09")))