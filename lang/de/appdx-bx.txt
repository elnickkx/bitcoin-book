[[appdx_bx]]
Anhang

== Bitcoin Explorer (bx) Befehle

((("Bitcoin Explorer (bx) commands", id="BX18_1", range="startofrange")))Der Bitcoin Explorer (bx) ist ein Kommandozeilen Tool, welcher eine vielzahl an Möglichkeiten zur Schlüsselverwaltung und Transaktionsspezifikation bietet. Er ist ein Bestand der Bitcoin Bibliothek libbitcoin.

----
Usage: bx COMMAND [--help]

Info: Die bx Befehle sind:

address-decode
address-embed
address-encode
address-validate
base16-decode
base16-encode
base58-decode
base58-encode
base58check-decode
base58check-encode
base64-decode
base64-encode
bitcoin160
bitcoin256
btc-to-satoshi
ec-add
ec-add-secrets
ec-multiply
ec-multiply-secrets
ec-new
ec-to-address
ec-to-public
ec-to-wif
fetch-balance
fetch-header
fetch-height
fetch-history
fetch-stealth
fetch-tx
fetch-tx-index
hd-new
hd-private
hd-public
hd-to-address
hd-to-ec
hd-to-public
hd-to-wif
help
input-set
input-sign
input-validate
message-sign
message-validate
mnemonic-decode
mnemonic-encode
ripemd160
satoshi-to-btc
script-decode
script-encode
script-to-address
seed
send-tx
send-tx-node
send-tx-p2p
settings
sha160
sha256
sha512
stealth-decode
stealth-encode
stealth-public
stealth-secret
stealth-shared
tx-decode
tx-encode
uri-decode
uri-encode
validate-tx
watch-address
wif-to-ec
wif-to-public
wrap-decode
wrap-encode
----

Für weiterführende Informationen siehe https://github.com/libbitcoin/libbitcoin-explorer[Bitcoin Explorer Webseite] und https://github.com/libbitcoin/libbitcoin-explorer/wiki[Bitcoin Explorer Benutzerhandbuch].

=== Anwendungsbeispiele des bx-Befehls

Lassen Sie uns einige Beispiele von Bitcoin Explorer Befehlen betrachten, um mit Schlüsseln und Adressen experimentieren zu können.

Generiere einen zufälligen "seed" Wert, indem Sie den +seed+ Befehl nutzen, welcher den Zufallsgenerator des Betriebssystems nutzt. Übergebe den Seed an den +ec-new+ Befehl um einen neuen privaten Schlüssel zu erzeugen. Wir speichern die Standardausgabe in eine Datei _private_key_:

----
$ bx seed | bx ec-new > private_key
$ cat private_key
73096ed11ab9f1db6135857958ece7d73ea7c30862145bcc4bbc7649075de474
----

Generiere nun den öffentlichen Schlüssel vom privaten Schlüssel indem Sie den +ec-to-public+ Befehl nutzen. Wir übergeben die _private_key_file Daten in die Standardeingabe und sichern die Standardausgabe des Befehls in eine neue Datei _public_key_:

----
$ bx ec-to-public < private_key > public_key
$ cat public_key
02fca46a6006a62dfdd2dbb2149359d0d97a04f430f12a7626dd409256c12be500
----

Wir können +public_key+ zu einer Adresse konvertieren indem wir den Befehl +ec-to-address+ nutzen. Danach übergeben wir _public_key_ in die Standardeingabe. 

----
$ bx ec-to-address < public_key
17re1S4Q8ZHyCP8Kw7xQad1Lr6XUzWUnkG
----

Ein auf diese Art generierter Schlüssel produziert eine nicht deterministische type-0 Wallet. Dies bedeutet, dass jeder Schlüssel von einem unabhängigen Seed generiert wurde. Bitcoin Explorer Befehle können auch deterministische Schlüssel generieren, in Abhängigkeit zu BIP-32. In diesem Fall, wird ein "master" Schlüssel von einem Seed generiert und deterministisch um Unterschlüssel erweitert, resultierend in einer type-2 deterministischen Wallet.

Zuerst nutzen wir +seed+ und +hd-new+ Befehle um den Master Schlüssel zu generieren, Welcher als Basis zur Erzeugung von Subschlüsseln benötigt wird:

----
$ bx seed > seed
$ cat seed
eb68ee9f3df6bd4441a9feadec179ff1

$ bx hd-new < seed > master
$ cat master
xprv9s21ZrQH143K2BEhMYpNQoUvAgiEjArAVaZaCTgsaGe6LsAnwubeiTcDzd23mAoyizm9cApe51gNfLMkBqkYoWWMCRwzfuJk8RwF1SVEpAQ
----

Wir nutzen den Befehl +hd-private+ um den gehärteten "Konto" Schlüssel zu erstellen, sowie eine Abfolge von zwei privaten Schlüsseln des Kontos. 

----
$ bx hd-private --hard < master > account
$ cat account
xprv9vkDLt81dTKjwHB8fsVB5QK8cGnzveChzSrtCfvu3aMWvQaThp59ueufuyQ8Qi3qpjk4aKsbmbfxwcgS8PYbgoR2NWHeLyvg4DhoEE68A1n

$ bx hd-private --index 0 < account
xprv9xHfb6w1vX9xgZyPNXVgAhPxSsEkeRcPHEUV5iJcVEsuUEACvR3NRY3fpGhcnBiDbvG4LgndirDsia1e9F3DWPkX7Tp1V1u97HKG1FJwUpU

$ bx hd-private --index 1 < account
xprv9xHfb6w1vX9xjc8XbN4GN86jzNAZ6xHEqYxzbLB4fzHFd6VqCLPGRZFsdjsuMVERadbgDbziCRJru9n6tzEWrASVpEdrZrFidt1RDfn4yA3
----

Als nächstes verwenden wir den Befehl +hd-public+, um die entsprechende Sequenz von zwei Public Keys zu erzeugen:

----
$ bx hd-public --index 0 < account
xpub6BH1zcTuktiFu43rUZ2gXqLgzu5F3tLEeTQ5t6iE3aQtM2VMTxMcyLN9fYHiGhGpQe9QQYmqL2eYPFJ3vezHz5wzaSW4FiGrseNDR4LKqTy

$ bx hd-public --index 1 < account
xpub6BH1zcTuktiFx6CzhPbGjG3UYQ13WR16CmtbPiagEKpEVtpyjshWyMaMV1cn7nUPUkgQHPVXJVqsrA8xWbGQDhohEcDFTEYMvYzwRD7Juf8
----

Der öffentliche Schlüssel kann auch von den korrespondierenden privaten Schlüsseln abgeleitet werden, indem der Befehl +hd-to-public+ verwendet wird:

----
$ bx hd-private --index 0 < account | bx hd-to-public
xpub6BH1zcTuktiFu43rUZ2gXqLgzu5F3tLEeTQ5t6iE3aQtM2VMTxMcyLN9fYHiGhGpQe9QQYmqL2eYPFJ3vezHz5wzaSW4FiGrseNDR4LKqTy

$ bx hd-private --index 1 < account | bx hd-to-public
xpub6BH1zcTuktiFx6CzhPbGjG3UYQ13WR16CmtbPiagEKpEVtpyjshWyMaMV1cn7nUPUkgQHPVXJVqsrA8xWbGQDhohEcDFTEYMvYzwRD7Juf8
----

Mit diesen Befehlen kann eine praktisch grenzenlose Anzahl von Schlüsseln in einer deterministischen Kette erzeugt werden, die alle aus einem einzigen Seed abgeleitet sind. Diese Technik wird in vielen Wallet Anwendungen verwendet, um Schlüssel zu generieren, die gesichert sind, und mit einem einzigen Seed-Wert wiederhergestellt werden können. Dies ist einfacher als die Sicherung der Brieftasche mit all seinen zufällig generierten Schlüsseln, jedes mal wenn ein neuer Schlüssel erstellt wird.

Der Seed kann verschlüsselt werden mit dem Befehl +mnemonic-encode+: 

----
$ bx hd-mnemonic < seed > words
adore repeat vision worst especially veil inch woman cast recall dwell appreciate
----

Der Seed kann entschlüsselt werden mit dem Befehl +mnemonic-decode+:

----
$ bx mnemonic-decode < words
eb68ee9f3df6bd4441a9feadec179ff1
----

Die mnemonische Verschlüsselung kann helfen den Seed vereinfacht zu sichern oder gar zu merken. (((range="endofrange", startref="BX18_1"))) 