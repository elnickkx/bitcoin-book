[[appdx_bitcore]]
[appendix]

== Bitcore


((("Bitcore", id="bitcore16")))Bitcore, BitPay tarafından sağlanan bir araçlar paketidir. Amacı, Bitcoin yazılımcıları için kullanımı kolay araçlar sağlamaktır. Bitcore kodunun neredeyse tamamı JavaScript ile yazılmıştır. NodeJS için özel olarak yazılmış bazı modüller de vardır. Bitcore'un "node" modülü, Bitcoin Core'un C ++ kodunu içerir. Daha fazla bilgi için lütfen https://bitcore.io web adresine bakın.

=== Bitcore'un Özellik Listesi

* Bitcoin tam düğümü (bitcore-düğümü)
* Blok gezgini (içgörü)
* Blok, işlem ve cüzdan yardımcı programları (bitcore-lib)
* Bitcoin' un P2P ağı (bitcore-p2p) ile doğrudan iletişim kurma
* Tohum entropi anımsatıcı üretimi (bitcore-mnemonic)
* Ödeme protokolü (bitcore ödeme protokolü)
* Mesaj doğrulama ve imzalama (bitcore-message)
* Eliptik eğri Entegre Şifreleme Şeması (bitcore-ecies)
* Cüzdan hizmeti (bitcore-wallet-service)
* Cüzdan istemcisi (bitcore-wallet-client)
* Hizmetleri doğrudan Bitcoin Core (bitcore-node) ile entegre etme

=== Bitcore Kitaplığı Örnekleri

==== Önkoşullar

* NodeJS >= 4.x

NodeJS ve REPL düğümü kullanılıyorsa:

[Kaynağı, deneme]
----
$ npm install -g bitcore-lib bitcore-p2p
----

==== bitcore-lib kullanan Cüzdan Örnekleri

İlişkili özel anahtarla yeni bir bitcoin adresi oluşturmak:

----
> bitcore = require('bitcore-lib')
> privateKey = new bitcore.PrivateKey()
> address = privateKey.toAddress().toString()
----

Hiyerarşik deterministik özel anahtar ve adres oluşturma:

----
> hdPrivateKey = bitcore.HDPrivateKey()
> hdPublicKey = bitcore.HDPublicKey(hdPrivateKey)
> hdAddress = new bitcore.Address(hdPublicKey.publicKey).toString()
----

Bir UTXO' dan bir işlem oluşturma ve imzalama:

----
> utxo = {
txId: harcanmamış çıktı içeren işlem kimliği,
outputIndex: çıktı indeksi örneğin 0,
adres: addressOfUtxo,
script: bitcore.Script.buildPublicKeyHashOut(addressOfUtxo).toString(),
satoshis: adrese gönderilen miktar
}
fee = 3000 // ağdaki koşullar için uygun şekilde ayarlayın
> tx = yeni bitcore.Transaction()
.from (utxo)
.to (address, 35000)
.fee (ücret)
.enableRBF ()
.sign(privateKeyOfUtxo)
----

Mempoolda'ki son işlemi değiştirme (replace-by-fee):

----
> rbfTx = new Transaction()
 .from(utxo)
 .to(address, 35000)
 .fee(fee*2)
 .enableRBF()
 .sign(privateKeyOfUtxo);
> tx.serialize();
> rbfTx.serialize();
----

Bitcoin ağına bir işlem yayınlamak
(not: yalnızca geçerli işlemleri yayınlayın; eş ana bilgisayarlar için https://bitnodes.21.co/nodes[] adresine bakın):

1. Aşağıdaki kodu _broadcast.js_ adlı bir dosyaya kopyalayın.
2. +tx+ ve +rbfTx+ değişkenleri sırasıyla +tx.serialize()+ ve +rbfTx.serialize()+ çıktılarıdır.
3. Harç ile değiştirme için, eşin bitcoind +mempoolreplace+ 'ı seçeneğini desteklemesi ve +1+ olarak ayarlamış olması gerekir.
4. node _broadcast.js_((("", startref="bitcore16"))) dosyasını çalıştırın:

----
var p2p = require('bitcore-p2p');
var bitcore = require('bitcore-lib');
var tx = new bitcore.Transaction('output from serialize function');
var rbfTx = new bitcore.Transaction('output from serialize function');
var host = 'ip address'; //tcp 8333 de geçerli eş dinleme kullan
var peer = new p2p.Peer({host: host});
var messages = new p2p.Messages();
peer.on('ready', function() {
 var txs = [messages.Transaction(tx), messages.Transaction(rbfTx)];
 var index = 0;
 var interval = setInterval(function() {
 peer.sendMessage(txs[index++]);
 console.log('tx: ' + index + ' sent');
 if (index === txs.length) {
 clearInterval(interval);
 console.log('disconnecting from peer: ' + host);
 peer.disconnect();
 }
 }, 2000);
});
peer.connect();
----