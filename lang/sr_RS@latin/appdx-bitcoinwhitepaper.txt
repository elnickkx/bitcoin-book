[[satoshi_whitepaper]]
[appendix]
== The Bitkoin Whitepaper Satošija Nakamotoa

[NOTE]
====
((("whitepaper", id="whitethirteen")))((("bitcoin whitepaper", id="BCwhitethirteen")))((("Nakamoto, Satoshi", id="nakamatothirteen")))Ovo je originalni whitepaper, reprodukovan u celosti tačno onako kako ga je objavio Satoši Nakamoto u oktobru 2008.
====

=== Bitkoin - Peer-to-peer elektronski sistem gotovine

Satoši Nakamoto

_satoshin@gmx.com_

pass:[<a href="https://bitcoin.org/en/" class="orm:hideurl"><em>www.bitcoin.org</em></a>]

* Abstrakt. * Potpuno ravnopravna verzija elektronske gotovine omogućila bi plaćanje putem Interneta direktno od jednog do drugog lica bez prolaska kroz finansijsku instituciju. Digitalni potpisi pružaju deo rešenja, ali glavne koristi se gube ako je za sprečavanje dvostrukog trošenja još uvek potrebno pouzdano treće lice. Predlažemo rešenje problema dvostruke potrošnje korišćenjem mreže peer-to-peer. Mreža vremenski označava transakcije sa hešom i ubacuje ih u tekući lanac dokaza o radu, formira zapis koji se ne može promeniti bez ponovog ponavljanja dokaza o radu. Najduži lanac ne služi samo kao dokaz redosleda događaja kojima je svedočio, već je dokaz da potiče iz najvećeg skupa snage CPU-a. Sve dok većinu snage CPU-a kontrolišu čvorovi koji ne sarađuju u napadu na mrežu, oni će generisati najduži lanac i tako se odbraniti od napadača. Mreža sama po sebi zahteva minimalnu strukturu. Poruke se emituju na osnovu najboljeg rada, a čvorovi samovoljno mogu da napuste i ponovo se pridruže mreži, prihvatajući najduži lanac dokaza o radu kao dokaz onoga što se dogodilo dok ih nije bilo.

==== Uvod
Trgovina na Internetu se gotovo isključivo oslanja na finansijske institucije koje služe kao pouzdano treće lice za obradu elektronskih plaćanja. Iako sistem radi dovoljno dobro za većinu transakcija, on i dalje pati od urođenih slabosti modela zasnovanog na poverenju. Potpuno nepovratne transakcije zapravo nisu moguće, jer finansijske institucije ne mogu da izbegnu posredovanje u slučaju spora. Troškovi posredovanja povećavaju troškove transakcije, ograničavajući minimalnu praktičnu veličinu transakcije i pritom smanjuju mogućnost za male neobavezne transakcije, a još je veća cena gubitak mogućnosti vršenja nepovratnih plaćanja za nepovratne usluge. Ako postoji mogućnost povrata, potreba za poverenjem se širi. Trgovci moraju da budu obazrivi kada su kupci u pitanju, pa ih prisiljavaju da otkriju više informacija nego što je potrebno. Određeni procenat prevara smatra se neizbežnim. Ovi troškovi i nesigurnosti plaćanja mogu da se izbegnu korišćenjem fizičke valute pri ličnom plaćanju, ali ne postoji mehanizam za plaćanje preko komunikacionog kanala bez pouzdanog lica.

Ono što je potrebno jeste elektronski sistem plaćanja zasnovan na kriptografskom dokazu umesto poverenja, omogućavajući bilo kom od dva voljna lica da direktno komunicira jedno sa drugim bez potrebe za pouzdanim trećim licem. Transakcije, računski nepraktične za poništavanje, zaštitile bi prodavce od prevare, a rutinski escrow mehanizmi lako bi se mogli implementirati u cilju zaštite kupaca. U ovom radu predlažemo rešenje problema dvostruke potrošnje korišćenjem peer-to-peer distribuiranog servera vremenskih pečata da bi se generisao računski dokaz hronološkog redosleda transakcija. Sistem je siguran sve dok pošteni čvorovi (honest nodes) kolektivno kontrolišu više snage CPU-a od bilo koje grupe koja sarađuje sa napadačkim čvorovima.

==== Transakcije
Elektronsku kovanicu definišemo kao lanac digitalnih potpisa. Svaki vlasnik prenosi kovanicu sledećem vlasniku digitalnim potpisivanjem heša prethodne transakcije i javnim ključem sledećeg vlasnika i dodaje ih na kraj kovanice. Primalac plaćanja može da verifikuje potpise kako bi verifikovao lanac vlasništva.

image::images/mbc2_abin01.png["Transactions"]

Problem je naravno u tome što primalac uplate ne može potvrditi da jedan od vlasnika nije dvostruko potrošio novac. Uobičajeno rešenje je uvođenje pouzdanog centralnog autoriteta, ili kovnice, koji za svaku transakciju proverava da li ima dvostruku potrošnju. Nakon svake transakcije, kovanica se mora vratiti u kovnicu kako bi se izdala nova kovanica, a kovanice direktno izdate iz kovnice imaju poverenje da nisu dvostruko potrošene. Problem sa ovim rešenjem je što sudbina celog novčanog sistema zavisi od kompanije koja vodi kovnicu, a svaka transakcija mora da prođe kroz nju, baš kao kod banke.

Potreban nam je način da primalac uplate sazna da prethodni vlasnici nisu potpisali nijednu raniju transakciju. Za naše potrebe, najranija transakcija je najbitnija, tako da nas ne zanimaju kasniji pokušaji dvostrukog trošenja. Jedini način da se potvrdi nepostojanje transakcije je svest o svim transakcijama. U modelu na bazi kovnice, kovnica je bila svesna svih transakcija i odlučila je koja je prva stigla. Da bismo to postigli bez lica od poverenja, transakcije moraju biti javno objavljene [1], i potreban nam je sistem u kome učesnici mogu da se dogovore o jedinstvenoj istoriji redosleda po kome su primljene. Primaocu uplate je potreban dokaz da se u vreme svake transakcije, većina čvorova (učesnika sistema) složila da je ona prva primljena.

==== Server vremenskih pečata (Timestamp Server)
Rešenje koje predlažemo počinje sa serverom za vremenske pečate. Server vremenskih pečata radi tako što uzima heš bloka elemenata koje treba vremenski označiti pečatom i naširoko objavljuje heš, npr. u novinama ili u postu na Usenet-u [2-5]. Vremenski pečat dokazuje da su podaci u to vreme očigledno postojali, kako bi se moglo ući u heš. Svaki vremenski pečat uključuje prethodni vremenski pečat u svom hešu, formirajući lanac, pri čemu svaki dodatni vremenski pečat pojačava one pre njega.

image::images/mbc2_abin02.png["timestamp server"]

==== Proof-of-Work (dokaz rada)
Za implementaciju distribuiranog servera vremenskih pečata na nivou peer-to-peer, moramo da koristimo sistem Proof-of-Work-a (dokaza rada) sličan Hashcash-u Adama Beka (Adam Back) [6], umesto novina ili Usenet-a. Proof-of-Work uključuje skeniranje vrednosti koja kada se hešuje, kao na primer sa SHA-256, njen heš počinje sa brojem nula bita. Prosečan potreban rad je eksponencijalan u broju potrebnih nula bita i može se verifikovati izvršenjem jednog heša. Za našu mrežu vremenskih pečata implementiramo Proof-of-Work povećavanjem jedog broja nonce-a u bloku sve dok se ne nađe vrednost koja daje heš od bloka koji ima potreban broj nula bita. Jednom kada se potroši CPU da bi se zadovoljio Proof-of-Work, blok se ne može menjati bez ponovnog rada. Pošto se kasnije blokovi vezuju za njega u lanac, rad na promeni bloka bi uključivao ponovno obrađivanje svih blokova posle njega.

image::images/mbc2_abin03.png["pow"]

Proof-of-Work takođe rešava problem određivanja reprezentacije u većinskom odlučivanju. Ako bi se većina zasnivala na principu jedna-IP-adresa-jedan-glas, mogao bi je oboriti svako ko je u mogućnosti da dodeli više IP adresa. Proof-of-Work je u osnovi jedan-CPU-jedan glas. Odluku većine predstavlja najduži lanac, u koji je uložen najveći Proof-of-Work. Ako većinu snage CPU-a kontrolišu pošteni čvorovi, pošten lanac će najbrže rasti i nadmašiti sve konkurentne lance. Da bi modifikovao prethodni blok, napadač bi morao ponovo da napravi Proof-of-Work tog bloka i svih blokova nakon njega, a zatim da stigne i nadmaši rad poštenih čvorova. Kasnije ćemo pokazati da verovatnoća da se sporiji napadač pristigne eksponencijalno smanjuje kako se dodaju naredni blokovi.

Da bi se tokom vremena nadoknadilo povećavanje brzine hardvera i promene u interesovanju za pokretanje čvorova, težina Proof-of-Work-a određuje se pokretnim prosekom sa ciljem za stvaranje prosečnog broja blokova na sat. Ako se stvaraju prebrzo, težina se povećava.

==== Мreža

Koraci za pokretanje mreže su sledeći:

1. Nove transakcije se emituju na sve čvorove.
2. Svaki čvor sakuplja nove transakcije u jedan blok.
3. Svaki čvor radi na pronalaženju Proof-of-Work-a za svoj blok.
4. Kada čvor nađe Proof-of-Work, emituje taj blok svim čvorovima.
5. Čvorovi prihvataju blok samo ako su sve transakcije u njemu validne i nisu već potrošene.
6. Čvorovi izražavaju prihvatanje bloka radeći na stvaranju sledećeg bloka u lancu, koristeći heš prihvaćenog bloka kao prethodni heš.

Čvorovi uvek smatraju da je najduži lanac ispravan i nastaviće da rade na njegovom produžavanju. Ako dva čvora istovremeno emituju različite verzije sledećeg bloka, neki čvorovi mogu prvo da prime jedan ili drugi. U tom slučaju rade na prvom koji su dobili, ali čuvaju drugu granu u slučaju da postane duža. Veza se prekida kada se nađe sledeći Proof-of-Work i jedna grana postane duža; tada će čvorovi koji su radili na drugoj grani preći na tu dužu.

Nove emitovane transakcije ne moraju nužno dopreti do svih čvorova. Dokle god stignu do velikog broja čvorova, one će kad-tad ući u blok. Emisije blokova takođe tolerišu ispuštene poruke. Ako čvor ne primi blok, zatražiće ga kada primi sledeći blok i shvati da je jedan propustio.

==== Podsticaj
Po konveciji, prva transakcija u bloku je posebna transakcija kojom se započinje nova kovanica u vlasništvu kreatora bloka. Ovo daje podsticaj čvorovima da podrže mrežu i pruža način za početnu distribuciju kovanica u opticaj, jer ne postoji centralni autoritet za njihovo izdavanje. Redovno dodavanje konstantne količine novih kovanica analogno je rudarima zlata koji troše resurse da bi dodali zlato u opticaj. U našem slučaju troše se vreme CPU-a i električna energija.

Podsticaj se takođe može finansirati naknadama za transakcije. Ako je vrednost iznosa transakcije manja od njene ulazne vrednosti, razlika je naknada za transakciju koja se dodaje vrednosti podsticaja bloka koji sadrži transakciju. Jednom kada unapred utvrđeni broj kovanica uđe u opticaj, podsticaj u potpunosti može da pređe na naknadu za transakcije i da bude potpuno bez inflacije.

Ovaj podsticaj može da pomogne pri podsticanju čvorova da ostanu pošteni. Ako bi pohlepni napadač bio u stanju da prikupi više snage CPU-a od svih poštenih čvorova, morao bi da odabere da li da je iskoristi za proneveru kradući od ljudi svoje uplate, ili da stvori nove kovanice. Trebao bi da uvidi da mu se više isplati da igra po pravilima, i to takvim pravilima koja mu daju prednost sa više novih kovanica od svih drugih učesnika zajedno, nego da potkopava sistem i validnost sopstvenog bogatstva.

==== Povrat prostora na disku

++++
<p>Jednom kada se poslednja transakcija jedne kovanice zakopa ispod dovoljno blokova, potrošene transakcije pre nje mogu da se odbace kako bi se sačuvao prostor na disku. Da bi se ovo olakšalo bez rušenja heša bloka, transakcije se hešuju u Merkleovom stablu  <a href="#ref_seven">[7]</a> <a href="#ref_two">[2]</a> <a href="#ref_five">[5]</a> , a samo je koren uključen u heš bloka. Stari blokovi se mogu kompresovati otklanjanjem grana stabla. Unutrašnje hešove nije potrebno čuvati. </p>
++++

image::images/mbc2_abin04.png["disk"]

Zaglavlje bloka bez transakcija bilo bi oko 80 bajtova. Ako pretpostavimo da se blokovi generišu na svakih 10 minuta, +80 bajtova * 6 * 24 * 365 = 4.2MB+ godišnje. Sa računarskim sistemima koji se obično prodaju sa 2 GB RAM-a od 2008, a Murov zakon predviđa trenutni rast od 1,2GB godišnje, čuvanje podataka ne bi trebalo da predstavlja problem čak iako se zaglavlja blokova moraju zadržati u memoriji.

==== Pojednostavljena provera plaćanja
Plaćanje može da se proveri bez pokretanja punog mrežnog čvora koji ima sve blokove. Korisnik treba samo da zadrži kopiju zaglavlja bloka najdužeg lanca Proof-of-Work-a, koju može da dobije ispitivanjem drugih čvorova mreže sve dok se ne uveri da ima najduži lanac i pribavi Merkleovu granu koja povezuje transakciju sa blokom. On ne može da proveri transakciju samostalno, ali povezujući je sa mestom u lancu, može videti da ju je mrežni čvor prihvatio i dodao blokove nakon nje, što potvrđuje da je mreža prihvatila tu transakciju.

image::images/mbc2_abin05.png["spv"]

Verifikacija kao takva je pouzdana sve dok pošteni čvorovi kontrolišu mrežu, ali je ranjivija ako mrežom nadvada napadač. Iako mrežni čvorovi mogu sami da provere transakcije, pojednostavljena metoda može biti zavarana transakcijom napravljenom od strane napadača sve dok napadač nastavlja da nadjačava mrežu. Jedna strategija za zaštitu od toga bilo bi prihvatanje upozorenja od mrežnih čvorova kada oni otkriju nevažeći blok, što bi izazvalo da softver korisnika preuzme čitav blok i transakcije na koje se upozorava kako bi se potvrdila nedoslednost. Preduzeća koja primaju česta plaćanja verovatno će i dalje želeti da pokrenu sopstvene čvorove za nezavisniju bezbednost i bržu verifikaciju.

==== Kombinovanje i deljenje vrednosti
Iako bi kovanicama moglo da se rukuje pojedinačno, bilo bi neoprezno napraviti odvojenu transakciju za svaki cent u transferu. Da bi se omogućilo deljenje i kombinovanje vrednosti, transakcije sadrže više ulaza i izlaza. Obično će biti ili jedan ulaz iz veće prethodne transakcije ili više ulaza koji kombinuju manje iznose i najviše dva izlaza: jedan za uplatu i jedan za vraćanje kusura, ako ga ima, nazad pošiljaocu.

image::images/mbc2_abin06.png["combining-splitting"]

Treba napomenuti da ovde nije problem širenje, gde transakcija zavisi od nekoliko transakcija, a te transakcije opet zavise od mnogih drugih. Nikada ne postoji potreba da se izdvoji kompletna samostalna kopija istorije jedne transakcije.

==== Privatnost
Tradicionalni bankarski model postiže izvesan nivo privatnosti ograničavajući pristup informacijama uključenim licima i pouzdanom trećem licu. Nužnost javnog objavljivanja svih transakcija onemogućava ovu metodu, ali privatnost se i dalje može održati prekidom protoka informacija na drugom mestu: držanjem javnih ključeva anonimnim. Javno može da se vidi da neko šalje iznos nekom drugom, ali bez informacija koje transakcije vezuju koja lica. To je slično nivou informacija koje objavljuju berze, gde se objavljuju vreme i veličina pojedinačnih trgovanja, "knjiga transakcija", ali bez navođenja ko su ta lica.

image::images/mbc2_abin07.png["privacy"]

Kao dodatna zaštitna prepreka, za svaku transakciju treba koristiti novi par ključeva kako bi se sprečilo da se povežu sa zajedničkim vlasnikom. Neko povezivanje je i dalje neizbežno kod transakcija sa više ulaza, koje nužno otkrivaju da njihovi ulazi imaju istog vlasnika. Rizik je ako se otkrije vlasnik ključa, jer bi povezivanje moglo da otkrije ostale transakcije koje su pripadale istom vlasniku.

==== Proračuni
Razmotrite scenario napadača koji pokušava da stvori alternativni lanac brže od poštenog lanca. Čak ako se to postigne, to sistem ne čini otvorenim za proizvoljne promene, poput stvaranja vrednosti iz vazduha ili uzimanja novca koji nikada nije pripadao napadaču. Čvorovi neće prihvatiti nevažeću transakciju kao plaćanje, a pošteni čvorovi nikada neće prihvatiti blok koji ih sadrži. Napadač može pokušati samo da promeni neku svoju transakciju kako bi uzeo novac koji je nedavno potrošio.

Trka između poštenog lanca i napadačkog lanca može se okarakterisati kao binomni nasumični hod. Uspešan događaj je pošteni lanac koji se produžava za jedan blok, povećavajući njegovo vođstvo za +1, a neuspešan događaj je da se lanac napadača produži za jedan blok, smanjujući razmak za -1.

++++
<p>Verovatnoća da će napadač sustići iz datog deficita analogna je problemu Gambler's Ruin (problem kockarske propasti). Pretpostavimo da kockar sa neograničenim kreditom počinje sa deficitom i igra potencijalno neograničen broj pokušaja kako bi povratio ulog. Možemo da izračunamo verovatnoću da li će ikada povratiti ulog, ili da li će napadač ikada sustići iskreni lanac, kao što sledi: <a href="#ref_eight">[8]</a> : </p>
++++

p = verovatnoća da pošteni čvor pronađe sledeći blok

q = verovatnoća da napadač pronađe sledeći blok

q~z~ = verovatnoća da će napadač ikada sustići, počevši sa z blokova iza

image::images/mbc2_abin08.png["eq1"]

S obzirom na našu pretpostavku da je p > q, verovatnoća eksponencijalno opada kako se povećava broj blokova koje napadač mora da sustigne. S obzirom na izglede koji mu ne idu u prilog, ako prethodno ne uspe da napravi srećan proboj unapred, njegove šanse postaju neverovatno male kako odmiče dalje.

Sada ćemo razmotrili koliko dugo primalac nove transakcije treba da čeka pre nego što bude prilično siguran da pošiljalac ne može da promeni transakciju. Pretpostavljamo da je pošiljalac napadač koji želi da uveri primaoca da je izvršio uplatu pre nekog vremena, a zatim da prebaci plaćanje samom sebi posle nekog vremena. Primalac će biti upozoren kada se to desi, a pošiljalac može da se nada da će za to biti prekasno.

Primalac generiše novi par ključeva i daje javni ključ pošiljaocu neposredno pre potpisivanja. Ovo sprečava pošiljaoca da unapred pripremi lanac blokova radeći na njemu neprekidno, sve dok ne bude imao sreće da dovoljno napreduje, a potom izvrši transakciju. Jednom kada se transakcija pošalje, nepošteni pošiljalac počinje tajno da radi na paralelnom lancu koji sadrži alternativnu verziju njegove transakcije.

Primalac čeka dok se transakcija ne doda u blok i dok se z blokova ne poveže posle njega. On ne zna koliko je tačno napadač uznapredovao, ali pod pretpostavkom da je poštenim blokovima potrebno prosečno očekivano vreme po bloku, potencijalni napredak napadača biće Poasonova distribucija sa očekivanom vrednošću:

image::images/mbc2_abin09.png["eq2"]

Da bismo izračunali verovatnoću po kojoj bi napadač mogao da sustigne ostatak mreže, pomnožimo gustinu Poasona za svaku količinu napretka koju je mogao da ostvari sa verovatnoćom da stigne ostatak mreže od te tačke: 

image::images/mbc2_abin10.png["eq3"]

Preuređivanje da bi se izbeglo sabiranje beskonačnog repa distribucije...

image::images/mbc2_abin11.png["eq4"]

Konvertiranje u C kod...

[source,c]
----
#include <math.h>
double AttackerSuccessProbability(double q, int z)
{
    double p = 1.0 - q;
    double lambda = z * (q / p);
    double sum = 1.0;
    int i, k;
    for (k = 0; k <= z; k++)
    {
        double poisson = exp(-lambda);
        for (i = 1; i <= k; i++)
            poisson *= lambda / i;
        sum -= poisson * (1 - pow(q / p, z - k));
    }
    return sum;
}
----

Izvodeći neke rezultate možemo videti da se verovatnoća eksponencijalno spušta sa z.
----
q=0.1
z=0 P=1.0000000
z=1 P=0.2045873
z=2 P=0.0509779
z=3 P=0.0131722
z=4 P=0.0034552
z=5 P=0.0009137
z=6 P=0.0002428
z=7 P=0.0000647
z=8 P=0.0000173
z=9 P=0.0000046
z=10 P=0.0000012
----
----
q=0.3
z=0 P=1.0000000
z=5 P=0.1773523
z=10 P=0.0416605
z=15 P=0.0101008
z=20 P=0.0024804
z=25 P=0.0006132
z=30 P=0.0001522
z=35 P=0.0000379
z=40 P=0.0000095
z=45 P=0.0000024
z=50 P=0.0000006
----
Rešavanje za P manje od 0.1%...
----
P < 0.001
q=0.10 z=5
q=0.15 z=8
q=0.20 z=11
q=0.25 z=15
q=0.30 z=24
q=0.35 z=41
q=0.40 z=89
q=0.45 z=340
----

==== Zaključak
Predložili smo sistem za elektronske transakcije bez oslanjanja na poverenje. Počeli smo sa uobičajenim okvirom kovanica izrađenih iz digitalnih potpisa, koji pruža jaku kontrolu vlasništva, ali je nepotpun bez načina da se spreči dvostruka potrošenja. Da bismo to rešili, predložili smo mrežu peer-to-peer pomoću Proof-of-Work-a da bi se snimila javna istorija transakcija koja napadaču brzo postane računski nepraktična za menjanje, ukoliko pošteni čvorovi kontrolišu većinu snage CPU-a. Mreža je robusna u svojoj nestrukturisanoj jednostavnosti. Čvorovi rade istovremeno uz malo koordinacije. Oni se ne trebaju identifikovati, jer se poruke ne preusmeravaju na neko određeno mesto, nego treba da se dostave samo na osnovu najvećeg napora. Čvorovi mogu da napuštaju i ponovo se vraćaju na mrežu po svojoj volji, prihvatajući lanac Proof-of-Work-a kao dokaz onoga što se dogodilo dok ih nije bilo. Oni glasaju svojom CPU snagom, izražavajući svoje prihvatanje važećih blokova radeći na njihovom produženju i odbacujući nevažeće blokove odbijanjem da rade na njima. Sva potrebna pravila i podsticaji mogu se primeniti ovim mehanizmom konsenzusa.

==== Reference
++++
<p>
<span id="ref_one">[1]</span> W. Dai, "b-money," <a href="http://www.weidai.com/bmoney.txt"><em>http://www.weidai.com/bmoney.txt</em></a>, 1998.
</p>
<p>
<span id="ref_two">[2]</span> H. Massias, X.S. Avila, and J.-J. Quisquater, "Design of a secure timestamping service with minimal trust requirements," In 20th Symposium on Information Theory in the Benelux, May 1999.
</p>
<p>
<span id="ref_three">[3]</span> S. Haber, W.S. Stornetta, "How to time-stamp a digital document," In Journal of Cryptology, vol 3, no 2, pages 99-111, 1991.
</p>

<p>
<span id="ref_four">[4]</span> D. Bayer, S. Haber, W.S. Stornetta, "Improving the efficiency and reliability of digital time-stamping," In Sequences II: Methods in Communication, Security and Computer Science, pages 329-334, 1993.
</p>

<p>
<span id="ref_five">[5]</span> S. Haber, W.S. Stornetta, "Secure names for bit-strings," In Proceedings of the 4th ACM Conference on Computer and Communications Security, pages 28-35, April 1997.
</p>

<p>
<span id="ref_six">[6]</span> A. Back, "Hashcash - a denial of service counter-measure," <a href="http://www.hashcash.org/papers/hashcash.pdf"><em>http://www.hashcash.org/papers/hashcash.pdf</em></a>, 2002.
</p>

<p>
<span id="ref_seven">[7]</span> R.C. Merkle, "Protocols for public key cryptosystems," In Proc. 1980 Symposium on Security and Privacy, IEEE Computer Society, pages 122-133, April 1980.
</p>

<p>
<span id="ref_eight">[8]</span> W. Feller, "An introduction to probability theory and its applications," 1957.
</p>
++++

=== Licenca

((("open source licenses")))Ovu knjigu (whitepaper) je objavio Satoši Nakamoto (Satoshi Nakamoto) u oktobru 2008. godine. Kasnije (2009.) je dodata kao prateća dokumentacija za bitkoin softver i nosi istu MIT licencu. Prikazana je u ovoj knjizi bez izmena osim u formatiranju, pod uslovima MIT licence:

The MIT License (MIT)
Copyright (c) 2008 Satoshi Nakamoto

Odobrenje se daje bez naknade da bilo koja osoba može napraviti kopiju ovog softvera i srodne dokumentacione datoteke (''Software''), da se bavi softverom bez ograničenja prava na korišćenje, kopiranje, modifikovanje, spajanje, objavljivanje, distribuiranje, podlicenciranje i/ili prodaju kopije softvera, i dozvoli osobama kojima je softver namenjen da to urade pod sledećim uslovima: 

Gore navedeni podaci o autorskim pravima i podaci o dozvoli korišćenja biće uključeni u sve kopije ili značajne delove softvera.

SOFTVER STVOREN ''KAO TAKAV'', BEZ GARANCIJUE BILO KOJE VRSTE, NEMA OGRANIČENJA NI ZA MOGUĆNOST PRODAJE, POGODNOSTI ZA POSEBNE NAMENE I NEPOKRETNOSTI. NE POSTOJE AUTORI ILI NOSIOCI AUTORSKOG PRAVA KOJI BI EVENTUALNO SNOSILI ODGOVORNOST ZA BILO KOJU TVRDNJU, ŠTETU ILI NEKU DRUGU ODGOVORNOST KOJA JE PREDMET UGOVORA, PRESTUP ILI NEŠTO DRUGO ŠTO MOŽE DA PROIZAĐE IZ TOGA, A U VEZI SA SOFTVEROM, NJEGOVIM KORIŠĆENJEM ILI DRUGIM POSLOVIMA NASTALIM IZ SOFTVERA.((("", startref="whitethirteen")))((("", startref="nakamatothirteen")))((("", startref="BCwhitethirteen")))