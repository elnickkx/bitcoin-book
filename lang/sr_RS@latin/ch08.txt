[[bitcoin_network_ch08]]
== Bitkoin mreža

=== Peer-to-peer arhitektura mreže

((("bitcoin network", "peer-to-peer architecture")))((("peer-to-peer (P2P)")))Bitkoin je struktuiran kao peer-to-peer mreža na vrhu interneta. Izraz peer-to-peer, ili P2P, znači da su računari koji učestvuju u mreži vršnjaci, da su svi jednaki, da ne postoje "posebni" čvorovi i da svi čvorovi dele teret pružanja mrežne usluge. Mrežni čvorovi se međusobno povezuju u mreži "ravne" topologije. Nema servera, nema centralizovanog servisa i nema hijerarhije u mreži. Čvorovi u P2P mreži istovremeno pružaju i konzumiraju usluge, sa recipročnošću koja podstiče na učešće. P2P mreže su inherentno otporne, decentralizovane i otvorene. Istaknuti primer arhitekture P2P mreže bio je rani internet, gde su čvorovi u IP mreži bili jednaki. Današnja internet arhitektura je više hijerarhijska, ali Internet protokol i dalje zadržava svoju suštinsku topološku "ravninu". Pored bitkoina, najveća i najuspešnija primena P2P tehnologija je deljenje fajla, gde je Napster pionir, a BitTorrent najnovija evolucija te arhitekture.

Bitkoin P2P mrežna arhitektura mnogo je više od izbora topologije. Bitkoin je digitalni P2P novčani sistem po dizajnu, a mrežna arhitektura je i odraz i temelj te osnovne karakteristike. Decentralizacija kontrole je osnovni princip dizajna, koji se može postići i održati samo ravnom, decentralizovanom P2P konsenzusnom mrežom.

((("bitcoin network", "defined")))Izraz "bitkoin mreža" odnosi se na kolekciju čvorova koji pokreću bitkoin P2P protokol. Pored bitkoin P2P protokola, postoje i drugi protokoli poput Stratuma koji se koriste za rudarenje i lagane ili mobilne novčanike. Ove dodatne protokole pružaju gateway ruting serveri koji pristupaju bitkoin mreži pomoću bitkoin P2P protokola, a zatim proširuju tu mrežu na čvorove koji pokreću druge protokole. Na primer, Stratum serveri povezuju Stratumove rudarske čvorove preko Stratum protokola sa glavnom bitkoin mrežom i premošćavaju Stratum protokol na bitkoin P2P protokol. Izraz "proširena bitkoin mreža" koristimo za označavanje ukupne mreže koja uključuje bitkoin P2P protokol, protokole za rudarenje u pulu (pool-mining), Stratum protokol i sve druge povezane protokole koje povezuju komponente bitkoin sistema.

=== Vrste i uloge čvorova

((("bitcoin network", "node types and roles", id="BNnode08")))((("bitcoin nodes", "types and roles", id="BNtype08")))Iako su čvorovi u bitkoin P2P mreži jednaki mogu imati različite uloge u zavisnosti od funkcionalnosti koju podržavaju. Bitkoin čvor je skup funkcija: usmeravanja (routing), baze podataka blokčejna, rudarenja i usluga novčanika. Puni čvor sa sve četiri funkcije je prikazan u <<full_node_reference>>.

[[full_node_reference]]
[role="smallerfifty"]
.Bitkoin mrežni čvor sa sve četiri funkcije: novčanikom, rudarenjem, celim blokčejnom i mrežnim usmeravanjem
image::images/mbc2_0801.png["FullNodeReferenceClient_Small"]

Svi čvorovi uključuju funkciju usmeravanja za učestvovanje u mreži i mogu da uključuju druge funkcionalnosti. Svi čvorovi potvrđuju i šire transakcije i blokove, i otkrivaju i održavaju veze sa vršnjacima. U primeru punog čvora u <<full_node_reference>>, funkcija usmeravanja je naznačena krugom nazvanim "Network Routing Node" ili slovom "N".

((("full-node clients")))Neki čvorovi, koji se nazivaju punim čvorovima, takođe održavaju kompletnu i ažuriranu kopiju blokčejna. Puni čvorovi mogu samostalno i autoritativno potvrditi bilo koju transakciju bez spoljne reference. ((("simple-payment-verification (SPV)")))Neki čvorovi održavaju samo podskup blokčejna i verifikuju transakcije metodom koja se zove _pojednostavljena provera plaćanja, simplified payment verification_ ili SPV. ((("lightweight clients")))Ovi čvorovi poznati su kao SPV čvorovi ili lagani čvorovi. U primeru punog čvora na slici, funkcija blokčejn baze podataka punih čvorova označena je krugom koji se zove "Full Blockchain" ili slovom "B". U <<bitcoin_network>>, SPV čvorovi se crtaju bez kruga "B", što pokazuje da nemaju potpunu kopiju blokčejna.

((("bitcoin nodes", "mining nodes")))((("mining and consensus", "mining nodes")))((("Proof-of-Work algorithm")))((("mining and consensus", "Proof-of-Work algorithm")))Rudarski čvorovi se takmiče u stvaranju novih blokova pokretanjem specijalizovanog hardvera za rešavanje algoritma Proof-of-Work. Neki čvorovi za rudarenje su takođe i puni čvorovi, pa održavaju potpunu kopiju blokčejna, dok su drugi lagani čvorovi koji učestvuju u rudarskom pulu zavise od servera pula za održavanje punog čvora. Funkcija rudarenja prikazana je u punom čvoru u obliku kruga koji se zove "Miner" (Rudar) ili slovom "M".

Korisnički novčanici mogu biti deo punog čvora, kao što je to obično slučaj sa desktop bitkoin klijentima. Mnogi korisnički novčanici, posebno oni koji rade na uređajima sa ograničenim resursama, kao što su smart telefoni, sve češće su SPV čvorovi. Funkcija novčanika prikazana je u <<full_node_reference>> kao krug pod nazivom "Wallet" ili slovo "W".

Pored glavnih tipova čvorova na bitkoin P2P protokolu, postoje serveri i čvorovi koji pokreću druge protokole, kao što su specijalizovani protokoli za rudarski pul i lagani protokoli za pristup klijentu.

<<node_type_ledgend>> prikazuje najčešće tipove čvorova na proširenoj mreži bitkoina.

=== Proširena bitkoin mreža

((("", startref="BNnode08")))((("", startref="BNtype08")))((("bitcoin network", "extended network activities")))Glavna bitkoin mreža koja pokreće bitkoin P2P protokol se sastoji od 5.000 do 8.000 čvorova koji slušaju i pokreću različite verzije bitkoin referentnog klijenta (Bitcoin Core), i nekoliko stotina čvorova koji pokreću razne druge implementacije bitkoin P2P protokola, kao što su Bitcoin Classic, Bitcoin Unlimited, BitcoinJ, Libbitcoin, btcd i bcoin. Mali procenat čvorova na bitkoin P2P mreži su rudarski čvorovi koji se takmiče u procesu rudarenja, potvrđuju transakcije i stvaraju nove blokove. Nekoliko velikih kompanija spajaju se sa bitkoin mrežom tako što pokreću klijente sa punim čvorovima na osnovu Bitcoin Core klijenta, sa potpunim kopijama blokčejna i mrežnog čvora, ali bez rudarskih ili novčanik funkcija. Ovi čvorovi deluju kao mrežni ruteri omogućavajući drugim uslugama (berzama, novčanicima, blok explorerima, obradi plaćanja trgovaca) da budu izgrađeni na vrhu.

Proširena bitkoin mreža uključuje mrežu koja pokreće bitkoin P2P protokol, opisanu ranije, kao i čvorove koji pokreću specijalizovane protokole. Na glavnu bitkoin P2P mrežu priključeni su brojni server pulovi (server pools) i protokoli koji povezuju čvorove koji rade na drugim protokolima. Ovi drugi čvorovi protokola uglavnom su pulovi čvorova za rudarenje (vidi <<mining>>) i lagani klijenti za novčanike koji ne nose potpunu kopiju blokčejna.

<<bitcoin_network>> prikazuje proširenu bitkoin mrežu sa različitim tipovima čvorova, gateway servera, edge rutera i klijenta za novčanike i različite protokole koje koriste za međusobno povezivanje.

[[node_type_ledgend]]
.Različiti čvorovi na proširenoj bitkoin mreži
image::images/mbc2_0802.png["BitcoinNodeTypes"]

[[bitcoin_network]]
.Proširena bitkoin mreža koja prikazuje razne tipove čvorova, prolaza i protokola
image::images/mbc2_0803.png["BitcoinNetwork"]

=== Bitkoin relej mreže

((("bitcoin network", "Bitcoin Relay Networks")))((("relay networks")))Dok bitkoin P2P mreža služi za opšte potrebe velikog broja tipova čvorova, pokazuje previsoke mrežne latencije za specijalizovane potrebe čvorova za rudarenje bitkoina.

((("propagation", "relay networks and")))Bitkoin rudari su angažovani u vremenski osetljivom takmičenju za rešavanje problema "Proof-of-Work“ (dokaz rada) i produžavanje blokčejna (vidi<<mining>>). Dok učestvuju u ovom takmičenju bitkoin rudari moraju da umanjuju vreme između širenja pobedničkog bloka i početka sledećeg kruga takmičenja. U rudarenju je latencija mreže direktno povezana sa profitnim maržama.

_Bitkoin relej mreža_ je mreža koja pokušava da umanji latenciju u prenosu blokova između rudara. Originalni http://www.bitcoinrelaynetwork.org[Bitcoin Relay Network] kreirao je core developer (vodeći programer) Mat Koralo (Matt Corallo) 2015. godine, kako bi omogućio brzu sinhronizaciju blokova između rudara sa vrlo malom latencijom. Mreža se sastojala od nekoliko specijalizovanih čvorova koji su smešteni na infrastrukturi Amazon Web Services-a širom sveta i služili su za povezivanje većine rudara i rudarskih pulova.

((("Fast Internet Bitcoin Relay Engine (FIBRE)")))((("Compact Block optimization")))Originalna Bitkoin relej mreža zamenjena je 2016. godine uvođenjem _Fast Internet Bitcoin Relay Engine_ ili http://bitcoinfibre.org[_FIBRE_], koji je takođe kreirao vodeći programer Mat Koralo. FIBER je UDP-ova relejna mreža koja prosleđuje blokove unutar mreže čvorova. FIBER implementira _compact block_ optimizaciju radi daljeg smanjenja količine poslatih podataka i latencije mreže.

((("Falcon Relay Network")))Još jedna relejna mreža (još uvek u fazi predloga) je http://www.falcon-net.org/about[_Falcon_], zasnovana na istraživanju univerziteta Kornel. Falcon koristi "cut-through-routing" (prosleđivanje podatka još i pre nego što su skroz stigli) umesto "store-and-forward" (skladišti, pa prosledi) da bi se  smanjila latencija širenjem delova blokova čim su oni primljeni, bez čekanja da se primi kompletan blok.

Relejne mreže nisu zamena za bitkoin P2P mrežu. Umesto toga, one su natkrivne mreže koje pružaju dodatnu povezanost između čvorova sa specijalizovanim potrebama. Kao što autoputevi nisu zamena za ruralne puteve, već prečice između dve tačke sa gustim saobraćajem, još uvek su vam potrebni mali putevi za povezivanje sa autoputem.

=== Network Discovery (otkrivanje mreže)

((("bitcoin network", "extended network discovery", id="BNextend08")))((("bitcoin nodes", "network discovery", id="BNodiscover08")))Kada se novi čvor pokrene, on mora da otkrije druge bitkoin čvorove na mreži da bi mogao da učestvuje. Da bi ovaj proces započeo, novi čvor mora da otkrije bar jedan postojeći čvor u mreži i da se poveže sa njim. Geografski položaj ostalih čvorova nije bitan; topologija bitkoin mreže nije geografski definisana. Stoga se nasumično može odabrati bilo koji od postojećih bitkoin čvorova.

Da bi se povezali sa poznatim vršnjakom, čvorovi uspostavljaju TCP vezu, obično preko porta 8333 (port koji je inače poznat kao onaj koji koristi bitkoin) ili alternativnog porta ukoliko je dat. Nakon uspostavljanja veze, čvor će započeti "handshake" ("rukovanje") (vidi <<network_handshake>>) slanjem poruke +verzije+ koja sadrži osnovne identifikacione informacije, uključujući:

+nVersion+ :: Verziju bitkoin P2P protokola koju klijent "govori" (npr. 70002)
+nLocalServices+ :: Listu lokalnih usluga koje podržava čvor, trenutno je samo +NODE_NETWORK+
+nTime+ :: Trenutno vreme
+addrYou+ :: IP adresu udaljenog čvora kako se ona vidi sa ovog čvora
+addrMe+ :: IP adresu lokalnog čvora, onako kako ju je otkrio lokalni čvor
+subver+ :: Podverziju koja prikazuje vrstu softvera koji radi na ovom čvoru (npr. pass:[<span class="keep-together"><code>/Satoshi:0.9.2.1/</code></span>])
+BestHeight+ :: Visinu bloka u blokčejnu ovog čvora

(Pogledajte http://bit.ly/1qlsC7w[GitHub] za primer +verzije+ mrežne poruke.)

Poruka +verzije+ je uvek prva poruka koju bilo koji vršnjak pošalje drugom vršnjaku. Lokalni vršnjak koji prima poruku +verzije+ ispitaće objavljenu +nVersion+ udaljenog vršnjaka i odlučiti da li je udaljeni vršnjak kompatibilan. Ako je udaljeni vršnjak kompatibilan, lokalni vršnjak će potvrditi poruku +verzije+ i uspostaviti vezu slanjem +verack+.

Kako novi čvor nalazi vršnjake? Prvi metod je ispitivanje DNS-a korišćenjem broja "DNS semena (DNS seeds)", koji su DNS serveri koji pružaju listu IP adresa bitkoin čvorova. Neke od tih DNS semena pružaju statičku listu IP adresa stabilnih čvorova za preslušavanje bitkoina. Neki od DNS semena su prilagođene implementacije BIND-a (Berkeley Internet Name Daemon) koji vraćaju slučajni podskup sa liste adresa bitkoin čvora prikupljenih pomoću alata ili bitkoin čvora koji dugo radi. Bitcoin Core klijent sadrži imena pet različitih DNS semena. Raznovrsnost vlasništva i raznovrsnost implementacija različitih DNS semena nudi visok nivo pouzdanosti za početno povezivanje sistema. U Bitcoin Core klijentu mogućnost korišćenja semena DNS-a kontroliše opcionalni prekidač +-dnsseed+ (difolt na 1 da bi se koristilo seme DNS-a).

Alternativno, čvoru za pokretanje sistema koji ništa ne zna o mreži mora se dodeliti IP adresa sa najmanje jednim bitkoin čvorom, nakon čega može da uspostavi veze kroz uvođenje narednih čvorova. Argument komandne linije +-seednode+ može se koristiti za povezivanje sa jednim čvorom za uvođenje, koristeći ga kao početno seme. Nakon što se seme početnog čvora upotrebi za uvod, klijent će se diskonektovati od njega i koristiti novootkrivene vršnjake.

[[network_handshake]]
.Početni handshake (rukovanje: za inicijlizaciju konekcije) između vršnjaka
image::images/mbc2_0804.png["NetworkHandshake"]

Nakon uspostavljanja jedne ili više veza, novi čvor će poslati +addr+ poruku svojim sopstvenim IP adresama. Susedi će zauzvrat proslediti +addr+ poruku svojim susedima osiguravajući da novopovezani čvor postane dobro poznat i bolje povezan. Pored toga, novopovezani čvor može komšijama da pošalje +getaddr+ tražeći od njih da vrate listu IP adresa ostalih vršnjaka. Na taj način čvor može pronaći vršnjake koji će se povezati i objaviti svoje postojanje na mreži da bi ga drugi čvorovi pronašli. <<address_propagation>> ((("propagation", "address propagation and discovery")))pokazuje protokol za otkrivanje adresa.


[[address_propagation]]
.Širenje i otkrivanje adrese
image::images/mbc2_0805.png["AddressPropagation"]

Čvor se mora povezati sa nekoliko različitih vršnjaka kako bi uspostavio različite putanje u bitkoin mreži. Putanje nisu stalne - čvorovi dolaze i odlaze - pa čvor mora nastaviti da otkriva nove čvorove kako gubi stare veze, kao i da pomaže drugim čvorovima kada se pokrenu. Za pokretanje sistema potrebna je samo jedna veza, jer prvi čvor može ponuditi uvod u svoje vršnjačke čvorove, a ti vršnjaci mogu ponuditi dalje čvorove. Takođe je nepotrebno rasipati mrežne resurse za povezivanje na više od par čvorova. Nakon pokretanja sistema, čvor će upamtiti poslednje uspešne vršnjačke veze, tako da ako se ponovo pokrene, brzo može uspostaviti veze sa prethodnom vršnjačkom mrežom. Ako niko od prehodnih vršnjaka ne odgovori na njegov zahtev za povezivanje, čvor može koristiti semenske čvorove da se ponovo pokrene.

Na čvoru koji pokreće Bitcoin Core klijenta, možete navesti vršnjačke veze komandom +getpeerinfo+:

[source,bash]
----
$ bitcoin-cli getpeerinfo
----
[source,json]
----
[
    {
        "addr" : "85.213.199.39:8333",
        "services" : "00000001",
        "lastsend" : 1405634126,
        "lastrecv" : 1405634127,
        "bytessent" : 23487651,
        "bytesrecv" : 138679099,
        "conntime" : 1405021768,
        "pingtime" : 0.00000000,
        "version" : 70002,
        "subver" : "/Satoshi:0.9.2.1/",
        "inbound" : false,
        "startingheight" : 310131,
        "banscore" : 0,
        "syncnode" : true
    },
    {
        "addr" : "58.23.244.20:8333",
        "services" : "00000001",
        "lastsend" : 1405634127,
        "lastrecv" : 1405634124,
        "bytessent" : 4460918,
        "bytesrecv" : 8903575,
        "conntime" : 1405559628,
        "pingtime" : 0.00000000,
        "version" : 70001,
        "subver" : "/Satoshi:0.8.6/",
        "inbound" : false,
        "startingheight" : 311074,
        "banscore" : 0,
        "syncnode" : false
    }
]
----

Da bi nadjačali automatsko upravljanje vršnjacima i odredili listu IP adresa, korisnici mogu da pruže opciju +-connect=<IPAddress>+ i odrede jednu ili više IP adresa. Ako se koristi ova opcija čvor će se povezati samo sa odabranim IP adresama, umesto da automatski otkriva i održava vršnjačke veze.

Ako na vezi nema prometa čvorovi će povremeno slati poruku za održavanje veze. Ako čvor nije komunicirao na vezi više od 90 minuta, pretpostavlja se da će biti isključen i tražiće se novi vršnjaci. Tako se mreža dinamički prilagođava privremenim čvorovima i problemima u mreži i može organski rasti i smanjivati se po potrebi, bez centralne kontrole. ((("", startref="BNextend08")))((("", startref="BNodiscover08")))

=== Puni čvorovi (full nodes)

((("bitcoin network", "full nodes")))((("full-node clients")))((("blockchain (the)", "full blockchain nodes")))Puni čvorovi (full nodes) su čvorovi koji održavaju ceo blokčejn sa svim transakcijama. Verovatno bi ih trebalo nazvati "punim blokčejn čvorovima". U ranim godinama bitkoina svi čvorovi su bili puni čvorovi, a trenutno je Bitcoin Core klijent pun blokčejn čvor. Međutim, u protekle dve godine su uvedeni novi oblici bitkoin klijenata koji ne održavaju puni blokčejn, već rade kao lagani (lightweight) klijenti. U sledećem odeljku će oni biti detaljnije ispitani.

((("blocks", "genesis block")))((("genesis block")))((("blockchain (the)", "genesis block")))Puni blokčejn čvorovi održavaju kompletnu i aktuelnu kopiju blokčejna sa svim transakcijama koje samostalno prave i verifikuju, počevši od prvog bloka (geneznog bloka) i nadograđujući do najnovijeg poznatog bloka u mreži. Puni blokčejn čvor može nezavisno i autoritativno proveriti bilo koju transakciju bez drugih podatka ili oslanjanja na bilo koji drugi čvor ili izvor informacija. Puni blokčejn čvor oslanja se na mrežu da prima ažuriranja o novim blokovima transakcija, koje potom verifikuje i ugrađuje u svoju lokalnu kopiju blokčejna.

((("bitcoin nodes", "full nodes")))Pokretanje punog blokčejn čvora pruža vam pravo bitkoin iskustvo: nezavisnu verifikaciju svih transakcija bez potrebe da se oslanjate ili verujete bilo kom drugom sistemu. Lako je reći da li imate pun čvor, jer vam je potrebno više stotina gigabajta persistentne memorije (prostora na disku) da biste sačuvali pun blokčejn. Ako vam treba puno mesta na disku i dva do tri dana da se sinhronizujete sa mrežom, onda ste pokrenuli pun čvor. To je cena potpune nezavisnosti i slobode u odnosu na centralnu vlast.

((("Satoshi client")))Postoji nekoliko alternativnih implementacija punog blokčejn bitkoin klijenta, programiranih u različitim programskim jezicima i sa različitim softverskim arhitekturama. Međutim, najčešća implementacija je referentni klijent Bitcoin Core, takođe poznat kao Satoshi klijent. Više od 75% čvorova u bitkoin mreži pokreću različite verzije Bitcoin Core-a. Identifikovan je kao "Satoshi" u stringu podverzije koji je poslat u poruci +verzije+ i prikazan naredbom +getpeerinfo+ kao što smo videli ranije; na primer, +/Satoshi:0.8.6 /+.

=== Razmena "inventara"

((("bitcoin network", "syncing the blockchain")))Prvo što će pun čvor učiniti nakon što se poveže sa vršnjacima je da pokuša da izgradi kompletan blokčejn. Ako je to potpuno novi čvor i uopšte nema blokčejn, on zna samo jedan blok, genezni blok (genesis block), koji je statički ugrađen u softver klijenta. Počevši od bloka #0 (geneznog bloka), novi čvor će morati da preuzme stotine hiljada blokova da bi se sinhronizovao sa mrežom i ponovo uspostavio pun blokčejn.

((("blockchain (the)", "syncing the blockchain")))((("syncing")))Proces sinhronizacije blokčejna započinje sa porukom +verzije+, jer sadrži +BestHeight+, trenutnu blokčejn visinu (broj blokova) čvora. Čvor će videti poruke +verzije+ svojih vršnjaka, znaće koliko blokova imaju i moći će da uporedi sa brojem blokova koji ima u sopstvenom blokčejnu. Vršnjački čvorovi će razmeniti +getblocks+ poruku koja sadrži heš (otisak prsta) gornjeg bloka na njihovom lokalnom blokčejnu. Jedan od vršnjaka moći će da identifikuje primljeni heš koji pripada bloku koji nije na vrhu, već pripada starijem bloku, čime se zaključuje da je njegov lokalni blokčejn duži od vršnjaka.

Vršnjak koji ima duži blokčejn ima više blokova od drugog čvora i može prepoznati koji blok je potreban drugom čvoru da bi se "ažurirao". Prepoznaće prvih 500 blokova za deljenje i slanje hešova pomoću poruke +inv+ (inventara). Čvor kojem nedostaju ovi blokovi skinuće ih izdavanjem niza +getdata+ poruka u kojima se zahtevaju puni podaci bloka i identifikovati tražene blokove pomoću hešova iz +inv+ poruke.

Na primer, pretpostavimo da čvor ima samo genezni blok. Zatim će primiti +inv+ poruku svojih vršnjaka koji sadrže hešove sledećih 500 blokova u lancu. Počeće da zahteva blokove od svih svojih povezanih vršnjaka, podeliti opterećenje i osigurati da ne preplavi nijednog vršnjaka sa zahtevima. Čvor prati koliko je blokova "u tranzitu" po vršnjačkoj vezi, što znači da su blokovi traženi ali nisu dobijeni, proveravajući da ne prelazi ograničenje (+MAX_BLOCKS_IN_TRANSIT_PER_PEER+). Na ovaj način, ako mu treba puno blokova, tražiće se novi samo ako su ispunjeni prethodni zahtevi, omogućavajući vršnjacima kontrolu brzine ažuriranja tako da ne preplavljuju mrežu. Kada se svaki blok primi dodaje se u blokčejn, kao što možete videti u <<blockchain>>. Kako se lokalni blokčejn postepeno gradi, zahteva se i prima više blokova, a postupak se nastavlja sve dok čvor ne stigne ostatak mreže.

Ovaj postupak poređenja lokalnog blokčejna sa vršnjacima i pronalaženja nedostajućih blokova događa se svaki put kada čvor nestane sa mreže na bilo koji vremenski period. Bez obzira na to da li je čvor nekoliko minuta van mreže i nedostaje mu nekoliko blokova, ili mesec dana i nedostaje mu nekoliko hiljada blokova, on započinje slanjem +getblocks+, dobija +inv+ odgovor i započinje preuzimanje blokova koji nedostaju. <<inventory_synchronization>> prikazuje inventar i protokol širenja blokova.

[[inventory_synchronization]]
[role="smallerfifty"]
.Čvor sinhronizuje blokčejn preuzimanjem blokova od vršnjaka
image::images/mbc2_0806.png["InventorySynchronization"]

[[spv_nodes]]
=== Pojednostavljeni čvorovi za verifikaciju plaćanja, Simplified Payment Verification (SPV)

((("bitcoin network", "SPV nodes", id="BNspvnodes08")))((("bitcoin nodes", "SPV nodes", id="BNospv08")))((("simple-payment-verification (SPV)", id="simple08")))Ne mogu svi čvorovi da skladište kompletni blokčejn. Mnogi bitkoin klijenti su dizajnirani da rade na uređajima sa ograničenim prostorom i strujom, kao što su smart telefoni, tableti ili ugrađeni sistemi. Za takve uređaje koristi se _pojednostavljena metoda verifikacije plaćanja (simplified payment verification) (SPV), koja im omogućava da rade bez spremanja punog blokčejna. Ove vrste klijenata nazivaju se SPV klijenti ili lagani (lightweight) klijenti. Kako se usvajanje bitkoina ubrzava, SPV čvor postaje najčešći oblik bitkoin čvora, posebno za bitkoin novčanike.

SPV čvorovi preuzimaju samo zaglavlje bloka i ne preuzimaju transakcije uključene u svaki blok. Rezultirajući lanac blokova bez transakcija je 1.000 puta manji od punog blokčejna. SPV čvorovi ne mogu konstruisati potpunu sliku svih UTXO-a koji su dostupni za potrošnju, jer ne znaju za sve transakcije na mreži. SPV čvorovi verifikuju transakcije koristeći malo drugačiju metodu, koja se oslanja na vršnjake da na zahtev pruže delimične prikaze relevantnih delova blokčejna.

Po analogiji, pun čvor bi bio turista u nepoznatom gradu, opremnjen detaljnom mapom svake ulice i svake adrese. Kao poređenje, SPV čvor bi bila turistkinja u nepoznatom gradu koja nasumično pita nepoznate ljude za svako skretanje, pri čemu poznaje samo glavnu ulicu. Iako oboje turista mogu da provere postojanje ulice tako što će je posetiti, turistkinja bez karte ne zna šta se nalazi u nekoj od sporednih ulica i ne zna koje sve ulice postoje. Stojeći ispred broja 23 u ulici Crkve, turistkinja bez karte ne može da zna da li u gradu postoji mnoštvo drugih "ulica Crkve broj 23" i da li je ovo prava. Najbolja šansa turistkinje bez karte je da pita ljude i da se nada da je neko od njih neće pokrasti.

SPV verifikuje transakcije pozivajući se na njihovu _dubinu_ u blokčejnu, umesto na _visinu_. Dok će puni blokčejn čvor izgraditi potpuno verifikovani lanac od hiljadu blokova i transakcija koji ide niz blokovski lanac (unazad) sve do geneznog bloka, SPV čvor će verifikovati lanac svih blokova (ali ne i sve transakcije) i povezati taj lanac sa transakcijom koja ga interesuje.

Na primer, prilikom ispitivanja transakcije u bloku 300.000, pun čvor povezuje svih 300.000 blokova do geneznog bloka i gradi punu bazu podataka UTXO-a, utvrđujući validnost transakcija tako što potvrđuje da UTXO ostaje nepotrošen. SPV čvor ne može proveriti da li je UTXO nepotrošen. Umesto toga, SPV čvor će uspostaviti vezu između transakcije i bloka koji je sadrži, koristeći _Merkleovu putanju_ (vidi <<merkle_trees>>). Zatim SPV čvor čeka dok ne vidi šest blokova od 300.001 do 300.006 nagomilane na vrhu bloka koji sadrže transakciju i verifikuje ga uspostavljanjem njegove dubine ispod blokova 300.006 do 300.001. Činjenica da su drugi čvorovi na mreži prihvatili blok 300.000, a zatim izvršili potreban posao da bi proizveli još šest blokova povrh njega je dokaz, zahvaljujući prosleđivanju, da transakcija nije bila dvostruko potrošena.

SPV čvor se ne može ubediti da transakcija postoji u bloku ako transakcija zapravo ne postoji. SPV čvor utvrđuje postojanje transakcije u bloku tako što zahteva dokaz Merkleove putanje i validacijom Proof-of-Work u lancu blokova. Međutim, postojanje transakcije može se "sakriti" od SPV čvora. SPV čvor definitivno može dokazati da transakcija postoji, ali ne može potvrditi da transakcija poput dvostrukog trošenja istog UTXO-a ne postoji, jer nema evidenciju svih transakcija. Ova ranjivost može se koristiti u DoS napadu ili za napad dvostruke potrošnje na SPV čvorove. Da bi se odbranio od toga, SPV čvor treba da se nasumično poveže na nekoliko čvorova kako bi se povećala verovatnoća da je u kontaktu sa bar jednim poštenim čvorom. Potreba da se nasumično poveže znači da su i SPV čvorovi ranjivi na network partitioning attacks (napade parčanja mreže) ili Sybil napade, gde su povezani sa lažnim čvorovima ili lažnim mrežama i nemaju pristup poštenim čvorovima ili pravoj bitkoin mreži.

U većini praktičnih namena, dobro povezani SPV čvorovi su dovoljno sigurni, uspostavljajući ravnotežu između male potrebe u resursima, praktičnosti i sigurnosti. Međutim, za nepogrešivu sigurnost nema ništa bolje od pokretanja punog blokčejn čvora.

[TIP]
====
Puni blokčejn čvor proverava transakciju proveravajući čitav lanac od hiljada blokova ispod njega da bi garantovao da UTXO nije potrošen, dok SPV čvor proverava koliko je duboko blok ukopan pomoću šačice blokova iznad njega.
====

Da bi dobili zaglavlje blokova, SPV čvorovi koriste +getheaders+ poruku umesto +getblocks+. Vršnjak sa odgovorom poslaće do 2.000 zaglavlja blokova koristeći jednu poruku +zaglavlja+. Proces je inače isti kao onaj koji koristi pun čvor za pronalaženje punih blokova. SPV čvorovi takođe postavljaju filter na vezu sa vršnjacima, kako bi filtrirali tok budućih blokova i transakcija koje su poslali vršnjaci. Sve transakcije koje su od interesa se preuzimaju pomoću +getdata+ zahteva. Vršnjak generiše +tx+ poruku koja sadrži transakcije, kao odgovor. <<spv_synchronization>> prikazuje sinhronizaciju zaglavlja blokova.

Budući da SPV čvorovi moraju da pronađu određene transakcije da bi ih selektivno proverili, oni takođe stvaraju rizik za privatnost. Za razliku od punih blokčejn čvorova, koji prikupljaju sve transakcije unutar svakog bloka, zahtevi SPV čvora za određene podatke mogu nenamerno otkriti adrese u svom novčaniku. Na primer, treće lice koje nadgleda mrežu može pratiti sve transakcije koje novčanik traži na SPV čvoru i koristiti ih za povezivanje bitkoin adresa sa korisnikom tog novčanika, narušavajući privatnost korisnika.

[[spv_synchronization]]
.SPV čvor koji sinhronizuje zaglavlja blokova
image::images/mbc2_0807.png["SPVSynchronization"]

Ubrzo nakon uvođenja SPV/laganih čvorova, programeri bitkoina dodali su funkciju koja se zove _Blumovi filteri (bloom filters)_ za rešavanje rizika privatnosti SPV čvorova. Blumovi filteri omogućavaju SPV čvorovima da prime podskup transakcija, a da ne otkriju koje ih  adrese tačno zanimaju, putem mehanizma filtriranja koji koristi verovatnoću, a ne fiksne šeme. ((("", startref="BNspvnodes08")))((("", startref="simple08")))

[[bloom_filters]]
=== Blumovi filteri

((("bitcoin network", "bloom filters", id="BNebloom08")))((("bloom filters", id="bloom08")))((("privacy, maintaining", id="privacy08")))((("security", "maintaining privacy", id="Sprivacy08")))Blumov filter je probabilistički filter pretrage, način da se opiše željeni obrazac, a da se ne precizira. Blumovi filteri nude efikasan način izražavanja obrasca pretraživanja uz zaštitu privatnosti. SPV čvorovi ih koriste da pitaju svoje vršnjake za transakcije koje odgovaraju određenom obrascu, bez otkrivanja tačnih adresa, ključeva ili transakcija koje traže.

U našoj prethodnoj analogiji, turistkinja bez mape traži uputstva do određene adrese, ulice Crkve 23. Ako nepoznate pita za uputstva do te ulice, ona nenamerno otkriva svoje odredište. Blumov filter je poput pitanja: "Postoje li ulice u ovom kraju čije se ime završava na K-V-E 23?" Takvo pitanje otkriva nešto manje o željenoj destinaciji nego pitanje kojim putem do "ulice Crkva 23". Koristeći ovu tehniku, turistkinja bi mogla detaljnije odrediti željenu adresu kao onu koja se "završava na R-K-V-E 23", ili manje detaljno kao onu koja se "završava na 3", Promenom preciznosti pretraživanja, turistkinja otkriva više ili manje informacija, na račun postizanja manje ili više specifičnih rezultata. Ako je u  pitanju manje specifičan tekst, dobija mnogo više mogućih adresa i bolju privatnost, ali mnogi rezultati su nebitni. Ako je u pitanju sasvim određeni tekst, dobija manje rezultata, ali gubi privatnost.

Blumovi filteri imaju funkciju da omoguće SPV čvoru da odredi šemu pretrage za transakcije koje se mogu prilagoditi preciznosti ili privatnosti. Precizniji Blumov filter će dati tačne rezultate, ali na račun otkrivanja za koje se šeme SPV čvor zanima, otkrivajući na taj način adrese u vlasništvu novčanika korisnika. Manje specifični Blumov filter vratiće više podataka o više transakcija, od kojih su mnogi nebitni za čvor, ali će omogućiti čvoru da održi veću privatnost.

==== Kako rade Blumovi filteri?

Blumovi filteri se implementiraju kao niz varijabilnih veličina N binarnih cifara (polje bitova) i promenljivog broja M heš funkcija. Heš funkcije dizajnirane su tako da uvek daju izlaz koji je između 1 i N, šta odgovara nizu binarnih cifara. Heš funkcije se generišu deterministički, tako da će svaki čvor koji implementira Blumov filter uvek koristiti iste heš funkcije i dobiti iste rezultate za određeni ulaz. Birajući Blumove filtere različitih dužina (N) i različitih brojeva (M) heš funkcija, Blumov filter se može podesiti, što utiče na nivo preciznosti, a samim tim i privatnosti.

U <<bloom1>>, koristimo vrlo mali niz od 16 bita i skup od tri heš funkcije da demonstriramo kako rade Blumovi filteri.

[[bloom1]]
.Primer jednostavnog Blumovog filtera, sa 16-bitnim poljem i tri heš funkcije
image::images/mbc2_0808.png["Bloom1"]

Blumov filter se inicijalizira tako da niz bitova predstavlja sve nule. Da biste dodali šemu Blumovom filteru, šema se redom hešuje sa svakom heš funkcijom. Primena prve heš funkcije na ulaz daje rezultate između broja 1 i N. Odgovarajući bit u nizu (indeksiran od 1 do N) se nađe i stavi na +1+, čime se beleži izlaz heš funkcije. Zatim se sledeća heš funkcija koristi za postavljanje drugog bita i tako dalje. Jednom kada su primenjene sve M heš funkcije, šema pretraživanja će se "snimiti" u Blumovom filteru kao M bitova koji su promenjeni sa +0+ na +1+.

<<bloom2>> je primer dodavanja šemi "A" jednostavnom Blumovom filteru prikazanom u <<bloom1>>.

Dodavanje druge šeme je jednostavno kao ponavljanje ovog postupka. Šema se zauzvrat hešuje sa svakom heš funkcijom, a rezultat se beleži stavljanjem bitova na +1+. Imajte na umu da pošto je Blumov filter ispunjen sa više šema, rezultat heš funkcije može da se poklopi sa bitom koji je već postavljen na +1+, u tom slučaju bit se ne menja. U suštini što se više delova beleži na bitovima koji se preklapaju, Blumov filter počinje da se zasićuje sa više bita postavljenih na +1+, a preciznost filtera se smanjuje. Zbog toga je filter probabilistička struktura podataka - postaje manje precizna jer se dodaje više šema. Preciznost zavisi od broja dodatih šema u odnosu na veličinu matrice bitova (N) i broja heš funkcija (M). Veći niz bita i više heš funkcija mogu da snime više šema sa većom preciznošću. Manji niz bitova ili manje heš funkcija snimiće manje obrazaca i stvoriti manju preciznost.

[[bloom2]]
.Dodavanje šeme "A" našem jednostavnom Blumovom filteru
image::images/mbc2_0809.png["Bloom2"]

<<bloom3>> je primer dodavanja druge šeme "B" jednostavnom Blumovom filteru.

[[bloom3]]
[role="smallereighty"]
.Dodavanje druge šeme "B" našem jednostavnom Blumovom filteru
image::images/mbc2_0810.png["Bloom3"]

Da biste testirali da li je šema deo Blumovog filtera, šema se hešuje sa svakom heš funkcijom, a rezultirajuća šema bitova testira se prema nizu bitova. Ako su svi bitovi indeksirani heš funkcijama postavljeni na +1+, tada je šema _verovatno_ snimljena u Blumovom filteru. Pošto se bitovi mogu postaviti zbog preklapanja iz više šema, odgovor nije siguran, nego je pre probabilistički (baziran na verovatnoći). Jednostavno rečeno, pozitivno podudaranje Blumovog filtera je "Možda, da (Maybe, yes)".

<<bloom4>> je primer testiranja postojanja šeme "X" u jednostavnom Blumovom filteru. Odgovarajući bitovi su postavljeni na +1+, tako da se šema verovatno preklapa.

[[bloom4]]
[role="smallereighty"]
.Ispitivanje postojanja šeme "X" u Blumovom filteru. Rezultat je po računici verovatnoće pozitivno preklapanje, što znači "Možda (Maybe)".
image::images/mbc2_0811.png["Bloom4"]

U suprotnom, ako se šema testira prema Blumovom filteru, i ako je bilo koji od bitova postavljen na +0+, to dokazuje da šema nije snimljena u Blumovom filteru. Negativan rezultat nije verovatnoća, nego je izvesnost. Jednostavno rečeno, negativno podudaranje na Blumovom filteru je "Definitivno ne (Definitively Not)!".

<<bloom5>> je primer testiranja postojanja uzorka "Y" u jednostavnom Blumovom filteru. Jedan od odgovarajućih bitova postavljen je na +0+, tako da se šema definitivno ne podudara.

[[bloom5]]
.Ispitivanje postojanja šeme "Y" u Blumovom filteru. Rezultat je definitivno negativno podudaranje, što znači "Definitivno ne (Definitively Not)!"
image::images/mbc2_0812.png[]

=== Kako SPV čvorovi koriste Blumove filtere

Blumovi filteri koriste se za filtriranje transakcija (i blokova koji ih sadrže) koje SPV čvor prima od svojih vršnjaka, birajući samo transakcije koje su zanimljive za SPV čvor, bez otkrivanja adresa ili ključeva koji ga zanimaju.

((("transaction IDs (txid)")))SPV čvor će inicijalizovati Blumov filter kao "prazan"; u tom stanju Blumov filter se neće podudarati sa bilo kojom šemom. SPV čvor će tada napraviti listu svih adresa, ključeva i hešova koji ga interesuju. To će uraditi tako što će izvaditi hešove javnih ključeva, skripte hešova i ID transakcija iz bilo kog UTXO-a kog kontroliše njegov novčanik. SPV čvor zatim dodaje svaki od njih u Blumov filter, tako da će se Blumov filter "podudarati" ako su ove šeme prisutne u transakciji, bez otkrivanja same šeme.

((("bitcoin nodes", "full nodes")))SPV čvor će tada poslati +filterload+ poruku vršnjaku, koja sadrži Blumov filter koji će se koristiti na vezi. Sa druge strane, Blumovi filteri proveravaju se prema svakoj ulaznoj transakciji. Puni čvor proverava nekoliko delova transakcije u odnosu na Blumov filter, tražeći preklapanje koje uključuje:

* ID transakcije
* Komponente podataka iz skripte za zaključavanje svakog od rezultata transakcije (svaki ključ i heš u skripti)
* Svaki od ulaza transakcije
* Svaku komponentu ulaznih podatka potpisa (ili skripte svedoka)

Proveravanjem svih ovih komponenti, Blumovi filteri se mogu koristiti za podudaranje hešova javnih ključeva, skripti, +OP_RETURN+ vrednosti, javnih ključeva u potpisima ili bilo koje buduće komponente pametnog ugovora (smart contract) ili složene skripte.

Nakon uspostavljanja filtera vršnjak će testirati izlaze svake transakcije prema Blumovom filteru. Na čvor se šalju samo transakcije koje odgovaraju filteru.

Kao odgovor na +getdata+ poruku iz čvora, vršnjaci će poslati +merkleblock+ poruku koja sadrži samo zaglavlja blokova za blokove koji odgovaraju filteru i Merkleovoj putanji  (vidi <<merkle_trees>>) za svaku odgovarajuću transakciju. Tada će vršnjak poslati i +tx+ poruke koje sadrže transakcije koje se podudaraju sa filterom.

Dok pun čvor šalje transakcije na SPV čvor, SPV čvor odbacuje sve lažne pozitivne rezultate i koristi transakcije koje se ispravno podudaraju za ažuriranje svog UTXO skupa i balansa novčanika. Kako ažurira sopstveni prikaz UTXO skupa, on takođe menja Blumov filter, tako da odgovara bilo kojim budućim transakcijama koje referenciraju na UTXO koji je upravo pronašao. Pun čvor zatim koristi novi Blumov filter da bi upoređivao nove transakcije, i čitav postupak se ponavlja.

Čvor koji postavlja Blumov filter može interaktivno da filteru doda šeme slanjem +filteradd+ poruke. Da bi očistio Blumov filter, čvor može poslati +filterclear+ poruku. Pošto nije moguće ukloniti šemu iz Blumovog filtera, čvor mora skloniti i ponovo poslati novi Blumov filter ako šema više nije poželjna.

Mrežni protokol i mehanizam Blumovog filtera za SPV čvorove je definisan u http://bit.ly/1x6qCiO[BIP-37 (Peer Services)].((("", startref="BNebloom08")))((("", startref="bloom08")))


=== SPV čvorovi i privatnost

Čvorovi koji implementiraju SPV imaju slabiju privatnost od punog čvora. Pun čvor prima sve transakcije i sa time ne otkriva nikakve informacije o tome da li koristi neku adresu u svom novčaniku. SPV čvor prima filtriranu listu transakcija koje se odnose na adrese u njegovom novčaniku. Kao rezultat smanjuje se privatnost vlasnika.

Blumovi filteri su način da se smanji gubitak privatnosti. Bez njih bi SPV čvor morao izričito da navede adrese koje su ga zanimale, ozbiljno kršeći privatnost. Međutim, čak i sa Blumovim filterima, protivnik koji prati promet SPV klijenta ili je spojen na njega direktno kao čvor u P2P mreži, može tokom vremena da prikupi dovoljno informacija i nauči adrese u novčaniku SPV klijenta.

=== Šifrovane i autentifikovane veze

((("bitcoin network", "encrypted connections")))((("encryption")))((("authentication")))Većina novih korisnika bitkoina pretpostavlja da su mrežne komunikacije bitkoin čvorova šifrovane. U stvari, originalna implementacija bitkoina komunicira u potpunosti na otvorenom. Iako to ne predstavlja veliki razlog za brigu oko privatnosti za pune čvorove, to je veliki problem za SPV čvorove.

Kao način da se poveća privatnost i sigurnost bitkoin P2P mreže, postoje dva rešenja koja omogućavaju šifrovanje komunikacija: _Tor Transport_ i _P2P Authentication and Encription_ sa BIP-150/151.

==== Tor Transport

((("Tor network")))((("The Onion Routing network (Tor)")))Tor, skraćenica za _The Onion Routing Network_, je softverski projekat i mreža koja nudi šifrovanje i enkapsulaciju podataka putem nasumične putanje mreže koje daju anonimnost, privatnost i ne ostavljaju trag.

Bitcoin Core nudi nekoliko opcija konfiguracije koje vam omogućavaju pokretanje bitkoin čvora sa njegovim prometom koji se transportuje preko Tor mreže. Pored toga, Bitcoin Core takođe može ponuditi Tor skrivenu uslugu omogućavajući drugim Tor čvorovima da se direktno povežu sa vašim čvorom preko Tor-a.

Od Bitcoin Core verzije 0.12, čvor će automatski ponuditi skrivenu Tor uslugu ako može da se poveže sa lokalnim Tor servisom. Ako imate instaliran Tor i ako Bitcoin Core proces radi kao korisnik sa adekvatnim dozvolama za pristup Tor-ovom cookie-ju za autentičnost, trebao bi da radi automatski. Koristite +debug+ oznaku da biste uključili debagovanje Bitcoin Core-a za Tor uslugu na ovaj način:

----
$ bitcoind --daemon --debug=tor
----

Trebalo bi da vidite "tor: ADD_ONION successful" u logu, što ukazuje da je Bitcoin Core dodao skriveni servis Tor mreži.

Možete pronaći više uputstva o pokretanju Bitcoin Core-a kao Tor-ov skriven servis u Bitcoin Core dokumentaciji (_docs/tor.md_)  i raznim onlajn tutorijalima.

==== Peer-to-Peer autentifikacija i šifrovanje

((("Peer-to-Peer authentication and encryption")))((("bitcoin improvement proposals", "Peer Authentication (BIP-150)")))((("bitcoin improvement proposals", "Peer-to-Peer Communication Encryption (BIP-151)")))Dva predloga za poboljšanje bitkoina, BIP-150 i BIP-151, dodaju podršku za P2P za autentifikaciju i šifrovanje u bitkoin P2P mreži. Ova dva BIP-a definišu opcionalne usluge koje mogu da ponude kompatibilni bitkoin čvorovi. BIP-151 omogućava pregovaranje šifrovanja za svu komunikaciju između dva čvora koji podržavaju BIP-151. BIP-150 nudi opcionalnu vršnjačku proveru identiteta, koja omogućava čvorovima da se međusobno identifikuju koristeći ECDSA i privatne ključeve. BIP-150 pre autentifikacije dva čvora zahteva da uspostavi šifrovana komunikacija kao što je opisano u BIP-151.

Od januara 2017. BIP-150 i BIP-151 nisu implementirani u Bitcoin Core. Međutim, ta dva predloga je implementirao bar jedan alternativni bitkoin klijent koji se zove bcoin.

BIP-150 i BIP-151 omogućavaju korisnicima da pokreću SPV klijente koji se povezuju na pouzdan pun čvor, koristeći šifrovanje i autentifikaciju za zaštitu privatnosti SPV klijenta.

Pored toga, autentifikacija se može koristiti za stvaranje mreža pouzdanih bitkoin čvorova i sprečavanje napada Man-in-Middle. Ako se P2P šifrovanje nađe u širokoj upotrebi, ono bi ojačalo otpornost bitkoina na analizu saobraćaja (traffik analysis) i nadzor koji narušava privatnost, posebno u totalitarnim zemljama u kojima je upotreba interneta strogo kontrolisana i pod nadzorom.

((("", startref="BNospv08")))((("", startref="privacy08")))((("", startref="Sprivacy08")))Standard je definisan na https://github.com/bitcoin/bips/blob/master/bip-0150.mediawiki[BIP-150 (Peer Authentication)] i https://github.com/bitcoin/bips/blob/master/bip-0151.mediawiki[BIP-151 (Peer-to-Peer Communication Encryption)].

=== Transakcijski pulovi

((("bitcoin network", "transaction pools")))((("transaction pools")))((("memory pools (mempools)")))Gotovo svaki čvor na bitkoin mreži održava privremenu listu nepotvrđenih transakcija pod nazivom _memorijski pul (memory pool)_, _mempool_ ili _transakcijski pul_. Čvorovi koriste ovaj pul za praćenje transakcija koje su poznate mreži, ali još nisu uključene u blokčejn. Na primer, čvor novčanika koristiće transakcijski pul da bi pratio ulazne uplate na novčaniku korisnika koje su primljene na mreži, ali još uvek nisu potvrđene.

Kad se transakcije prime i verifikuju dodaju se u transakcijski pul i prenose u susedne čvorove kako bi se proširile na mreži.

((("orphan pools")))((("transactions", "orphaned")))Neke implementacije čvorova takođe održavaju poseban pul orphan (siroče) transakcija. Ako se ulazi transakcije odnose na transakciju koja još nije poznata, kao kod nestalog roditelja, orphan transakcije će se privremeno skladištiti u orphan pulu dok ne dođe roditeljska transakcija.

Kada se transakcija doda u transakcijski pul, orphan pul proverava da li postoje orphan-i (siročići) koji referenciraju rezultate ove transakcije (njihovu decu). Svaki orphan koji se preklapa je onda validiran. Ako su validni uklanjaju se iz orphan pula i dodaju se u transakcijski pul, završavajući lanac koji je započeo roditeljskom transakcijom. U svetlu novododate transakcije, koja više nije orphan, proces se ponavlja rekurzivno tražeći dalje potomke, sve dok ih više ne bude. Kroz ovaj proces dolazak roditeljske transakcije pokreće kaskadnu rekonstrukciju čitavog lanca međuzavisnih transakcija ponovnim ujedinjenjem orphan-a sa njihovim roditeljima sve do dna lanca.

Transakcijski pul i orphan pul (ako je implementiran) se čuvaju u lokalnoj memoriji i ne spremaju se u trajno skladište; nego se dinamički pune iz ulaznih poruka mreže. Kada se čvor pokrene oba pula su prazna i postepeno se popunjavaju novim transakcijama primljenim sa mreže.

Neke implementacije bitkoin klijenta takođe održavaju UTXO bazu podataka ili pul, što je skup svih neiskorišćenih izlaza na blokčejnu. Iako naziv "UTXO pool" zvuči slično kao transakcijski pul (transaction pool), on predstavlja drugačiji skup podataka. Za razliku od transakcijskih i UTXO pulova, UTXO pul se ne inicijalizira prazan, nego sadrži milione unosa neiskorišćenih rezultata transakcija, sve što je ostalo neiskorišćeno sve do samog geneznog bloka. UTXO pul može da se smesti u lokalnu memoriju ili kao indeksirana tabela baze podataka u trajnom skladištu.

Dok transakcijski i orphan pulvi predstavljaju lokalnu perspektivu jednog čvora i mogu da se značajno razlikuju od čvora do čvora, zavisno od toga kada se čvor pokrenuo ili ponovo pokrenuo, UTXO pul predstavlja novi konsenzus mreže i zato će se malo razlikovati između čvorova. Pored toga, transakcijski i orphan pulovi sadrže samo nepotvrđene transakcije, dok UTXO pulovi sadrže samo potvrđene izlaze.