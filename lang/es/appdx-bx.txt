[[appdx_bx]]
[appendix]

== Comandos del "Bitcoin Explorer" (bx)

((("comandos del Bitcoin Explorer (bx)", id="BX18_1", range="startofrange")))El Bitcoin Explorer (bx) es una herramienta de la linea de comandos que ofrece una variedad de instrucciones para la administración de llaves y la construcción de transacciones. Forma parte de la biblioteca de bitcoin llamada "libbitcoin".

----
Como usar los comandos: bx COMANDO [--help]

Información: Los comandos "bx" son:

address-decode
address-embed
address-encode
address-validate
base16-decode
base16-encode
base58-decode
base58-encode
base58check-decode
base58check-encode
base64-decode
base64-encode
bitcoin160
bitcoin256
btc-to-satoshi
ec-add
ec-add-secrets
ec-multiply
ec-multiply-secrets
ec-new
ec-to-address
ec-to-public
ec-to-wif
fetch-balance
fetch-header
fetch-height
fetch-history
fetch-stealth
fetch-tx
fetch-tx-index
hd-new
hd-private
hd-public
hd-to-address
hd-to-ec
hd-to-public
hd-to-wif
help
input-set
input-sign
input-validate
message-sign
message-validate
mnemonic-decode
mnemonic-encode
ripemd160
satoshi-to-btc
script-decode
script-encode
script-to-address
seed
send-tx
send-tx-node
send-tx-p2p
settings
sha160
sha256
sha512
stealth-decode
stealth-encode
stealth-public
stealth-secret
stealth-shared
tx-decode
tx-encode
uri-decode
uri-encode
validate-tx
watch-address
wif-to-ec
wif-to-public
wrap-decode
wrap-encode
----

Para mayor información, consúltese: https://github.com/libbitcoin/libbitcoin-explorer[Bitcoin Explorer homepage] y https://github.com/libbitcoin/libbitcoin-explorer/wiki[Bitcoin Explorer user documentation].

=== Ejemplos de Uso de Comandos del "bx"

Veamos algunos ejemplos del uso de los comandos del Bitcoin Explorer para experimentar un poco con llaves y direcciones.

Vamos a generar un valor de "semilla" aleatoria, utilizando el comando +seed+, el cual utiliza el generador de números aleatorios de nuestro sistema operativo. Luego vamos a procesar esta semilla por el comando +ec-new+ para generar una nueva llave privada. Finalmente guardaremos el resultado que se obtiene como data estándar, en el archivo _private_key_:

----
$ bx seed | bx ec-new > private_key
$ cat private_key
73096ed11ab9f1db6135857958ece7d73ea7c30862145bcc4bbc7649075de474
----

A continuación, generaremos la llave pública a partir de ésa llave privada utilizando el comando +ec-to-public+. Procesaremos el archivo _private_key_ como dato de entrada estándar y guardaremos la data de salida estándar que nos arrojará el comando, en un nuevo archivo que llamaremos _public_key_:

----
$ bx ec-to-public < private_key > public_key
$ cat public_key
02fca46a6006a62dfdd2dbb2149359d0d97a04f430f12a7626dd409256c12be500
----

Podemos re-formatear la data de +public_key+ en la forma de una address o dirección bitcoin, utilizando el comando +ec-to-address+. Procesaremos la data del archivo _public_key_ como dato de entrada estándar:

----
$ bx ec-to-address < public_key
17re1S4Q8ZHyCP8Kw7xQad1Lr6XUzWUnkG
----

Las llaves generadas de este modo producen una cartera "tipo-0" no-determinista. Esto significa que cada llave es generada a partir de una semilla independiente. Los comandos del Bitcoin Explorer también pueden generar llaves de manera determinista, de acuerdo con el BIP-32. En este caso, una llave "maestra" es creada a partir de una semilla y a partir de allí es extendida determinísticamente para producir un árbol de sub-llaves, resultando en una cartera determinista "tipo-2".

En primer lugar, utilizaremos los comandos +seed+ y +hd-new+ para generar una llave maestra, que será utilizada como la base para derivar una jerarquía de llaves:

----
$ bx seed > seed
$ cat seed
eb68ee9f3df6bd4441a9feadec179ff1

$ bx hd-new < seed > master
$ cat master
xprv9s21ZrQH143K2BEhMYpNQoUvAgiEjArAVaZaCTgsaGe6LsAnwubeiTcDzd23mAoyizm9cApe51gNfLMkBqkYoWWMCRwzfuJk8RwF1SVEpAQ
----

Ahora utilizaremos el comando +hd-private+ para generar una llave para una "cuenta" fortalecida y una secuencia de dos llaves privadas dentro de esta cuenta:

----
$ bx hd-private --hard < master > account
$ cat account
xprv9vkDLt81dTKjwHB8fsVB5QK8cGnzveChzSrtCfvu3aMWvQaThp59ueufuyQ8Qi3qpjk4aKsbmbfxwcgS8PYbgoR2NWHeLyvg4DhoEE68A1n

$ bx hd-private --index 0 < account
xprv9xHfb6w1vX9xgZyPNXVgAhPxSsEkeRcPHEUV5iJcVEsuUEACvR3NRY3fpGhcnBiDbvG4LgndirDsia1e9F3DWPkX7Tp1V1u97HKG1FJwUpU

$ bx hd-private --index 1 < account
xprv9xHfb6w1vX9xjc8XbN4GN86jzNAZ6xHEqYxzbLB4fzHFd6VqCLPGRZFsdjsuMVERadbgDbziCRJru9n6tzEWrASVpEdrZrFidt1RDfn4yA3
----

A continuación, utilizaremos el comando +hd-public+ para generar la secuencia correspondiente de dos llaves públicas:

----
$ bx hd-public --index 0 < account
xpub6BH1zcTuktiFu43rUZ2gXqLgzu5F3tLEeTQ5t6iE3aQtM2VMTxMcyLN9fYHiGhGpQe9QQYmqL2eYPFJ3vezHz5wzaSW4FiGrseNDR4LKqTy

$ bx hd-public --index 1 < account
xpub6BH1zcTuktiFx6CzhPbGjG3UYQ13WR16CmtbPiagEKpEVtpyjshWyMaMV1cn7nUPUkgQHPVXJVqsrA8xWbGQDhohEcDFTEYMvYzwRD7Juf8
----

Las llaves públicas también pueden ser derivadas de sus correspondientes llaves privadas, utilizando el comando +hd-to-public+:

----
$ bx hd-private --index 0 < account | bx hd-to-public
xpub6BH1zcTuktiFu43rUZ2gXqLgzu5F3tLEeTQ5t6iE3aQtM2VMTxMcyLN9fYHiGhGpQe9QQYmqL2eYPFJ3vezHz5wzaSW4FiGrseNDR4LKqTy

$ bx hd-private --index 1 < account | bx hd-to-public
xpub6BH1zcTuktiFx6CzhPbGjG3UYQ13WR16CmtbPiagEKpEVtpyjshWyMaMV1cn7nUPUkgQHPVXJVqsrA8xWbGQDhohEcDFTEYMvYzwRD7Juf8
----

Podemos generar un número prácticamente ilimitado de llaves en una cadena determinística, todas derivadas de una misma semilla. Esta técnica es usada en muchas aplicaciones de cartera para generar llaves a las que es posible hacer copias de respaldo con un único valor de semilla. Esto es más fácil que tener que guardar copias de la cartera con todas sus llaves generadas aleatoriamente cada vez que una nueva llave es creada.

La semilla se puede codificar usando el comando +mnemonic-encode+:

----
$ bx hd-mnemonic < semilla > words
adore repeat vision worst especially veil inch woman cast recall dwell appreciate
----

A continuación, la semilla puede ser decodificada utilizando el comando +mnemonic-decode+:

----
$ bx mnemonic-decode < words
eb68ee9f3df6bd4441a9feadec179ff1
----

La codificación Mnemónica puede hacer a la semilla más fácil de almacenar e incluso de recordar.(((range="endofrange", startref="BX18_1")))